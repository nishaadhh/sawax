<%- include('../partials/user/header') %>

<!-- Start Banner Area -->
<section class="banner-area organic-breadcrumb">
  <div class="container">
    <div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
      <div class="col-first">
        <h1>Checkout</h1>
        <nav class="d-flex align-items-center">
          <!-- <a href="/">Home / <span class="lnr lnr-arrow-right" style="text-decoration: none; color: #d4af37;"></span></a>
          <a href="/cart">Cart <span class="lnr lnr-arrow-right" style="text-decoration: none; color: #d4af37;"></span></a>
          <a href="/checkout" style="text-decoration: none; color: #d4af37;">/ Checkout</a> -->
        </nav>
      </div>
    </div>
  </div>
</section>
<!-- End Banner Area -->

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<style>
  .order-summary {
    background-color: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  .order-summary img {
    width: 50px;
    height: 50px;
    object-fit: cover;
  }
  .order-summary .product-name {
    font-size: 14px;
  }
  .order-summary .product-mn {
    font-size: 12px;
    color: gray;
  }
  .order-summary .product-price {
    color: #d4af37;
    font-weight: bold;
  }
  .order-summary .total-price {
    color: #d4af37;
    font-weight: bold;
  }
  .order-summary .apply-btn {
    background-color: #ffc107;
    color: white;
  }
  .order-summary .place-order-btn {
    background: linear-gradient(135deg, #1a1a1a, #2c3e50);
    color: white;
  }
  .empty-cart-message {
    text-align: center;
    color: #777;
    font-size: 16px;
  }
  .place-button {
    font-weight: 400;
    font-size: small;
    margin-top: 10px;
    display: inline-block;
    padding: 8px 12px;
    background: linear-gradient(135deg, #1a1a1a, #2c3e50);
    color: #ffffff;
    border-color: #f0b800;
    border-radius: 5px;
    text-decoration: none;
  }
  .place-button:hover {
     background: linear-gradient(135deg, #d4a017, #e7c156);
     color: #ffffff;
  }
  :root {
    --primary-color: #d4af37;
    --secondary-color: #685619;
    --danger-color: #dc3545;
    --success-color: #28a745;
    --warning-color: #ffc107;
  }
  .dropdown-address {
    position: relative;
    display: inline-block;
    width: auto;
    margin: 10px 0;
  }
  .dropdown-address button {
    font-weight: 400;
    font-size: small;
    display: inline-block;
    padding: 8px 12px;
    background: linear-gradient(135deg, #1a1a1a, #2c3e50);
    color: white;
    border: 1px solid;
    border-radius: 10px;
    text-decoration: none;
    transition: background-color 0.3s ease;
    cursor: pointer;
  }
  .dropdown-address button:hover {
    background:linear-gradient(135deg, #000000, #2c3e50);
    color: rgb(255, 255, 255);
  }
  .dropdown-address-content {
    display: none;
    position: absolute;
    background-color: #ffffff;
    width: 650px;
    left: 0;
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    margin-top: 5px;
  }
  .dropdown-address-content.show {
    display: block;
  }
  #addressFormCheckout {
    background-color: #ffffff;
    border-radius: 10px;
  }
  
  /* Enhanced Form Validation Styles */
  .form-group {
    margin-bottom: 1.2rem;
    position: relative;
  }
  .form-group label {
    font-weight: 500;
    color: #333;
    margin-bottom: 8px;
    display: block;
    font-size: 0.95rem;
  }
  .form-group label.required::after {
    content: ' *';
    color: var(--danger-color);
    font-weight: bold;
  }
  
  .form-control {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    padding: 7px;
    font-size: 1rem;
    transition: all 0.3s ease;
    width: 100%;
    position: relative;
  }
  
  .form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 8px rgba(212, 175, 55, 0.2);
    outline: none;
  }
  
  /* Validation States */
  .form-control.is-valid {
    border-color: var(--success-color);
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%2328a745'%3e%3cpath d='M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 20px;
    padding-right: 45px;
  }
  
  .form-control.is-invalid {
    border-color: var(--danger-color);
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23dc3545'%3e%3cpath d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 20px;
    padding-right: 45px;
  }
  
  .form-control.is-checking {
    border-color: var(--warning-color);
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23ffc107'%3e%3cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 20px;
    padding-right: 45px;
  }
  
  /* Validation Messages */
  .validation-message {
    font-size: 0.875rem;
    margin-top: 5px;
    padding: 5px 0;
    transition: all 0.3s ease;
    min-height: 20px;
  }
  
  .validation-message.valid {
    color: var(--success-color);
  }
  
  .validation-message.invalid {
    color: var(--danger-color);
  }
  
  .validation-message.checking {
    color: var(--warning-color);
  }
  
  /* Character Counter */
  .char-counter {
    font-size: 0.8rem;
    color: #6c757d;
    text-align: right;
    margin-top: 2px;
  }
  
  .char-counter.warning {
    color: var(--warning-color);
  }
  
  .char-counter.danger {
    color: var(--danger-color);
  }

  #countryCheckout,
  #stateCheckout {
    height: calc(2.25rem + 2px);
    padding-top: 5px;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 1rem;
  }
  .btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    padding: 12px 30px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    border-radius: 8px;
    transition: all 0.3s ease;
    display: block;
    margin: 20px auto 0;
    position: relative;
  }
  .btn-primary:hover:not(:disabled) {
    background-color: var(--secondary-color);
    border-color: var(--primary-color);
    transform: translateY(-2px);
  }
  .btn-primary:active {
    transform: translateY(0);
  }
  
  .btn-primary:disabled {
    background-color: #6c757d;
    border-color: #6c757d;
    cursor: not-allowed;
    opacity: 0.65;
  }
  
  @media (max-width: 768px) {
    .dropdown-address-content {
      width: 100%;
      padding: 15px;
    }
    .btn-primary {
      width: 100%;
      padding: 12px;
    }
  }

  /* Loading state for buttons */
  .btn.loading {
    pointer-events: none;
    opacity: 0.7;
  }

  .btn.loading::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    margin: auto;
    border: 2px solid transparent;
    border-top-color: #ffffff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  @keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
  }

  .coupon-applied {
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
    padding: 10px;
    border-radius: 5px;
    margin-top: 10px;
  }
.add-address {
    display: inline-flex;
    align-items: center;
    gap: 10px;
    padding: 8px 25px;
    background: linear-gradient(135deg, #1a1a1a, #2c3e50);
    color: white;
    text-decoration: none;
    border-radius: 10px;
    font-weight: 500;
    transition: all 0.3s ease;
    margin-top: -17px;
}

.add-address:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 25px rgba(26, 26, 26, 0.3);
    text-decoration: none;
    color: rgb(222, 145, 0);
}
  .remove-coupon-btn {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
    font-size: 12px;
    cursor: pointer;
    margin-left: 10px;
  }

  .remove-coupon-btn:hover {
    background-color: #c82333;
  }
  
  /* Form Progress Indicator */
  .form-progress {
    height: 4px;
    background-color: #e9ecef;
    border-radius: 2px;
    margin-bottom: 20px;
    overflow: hidden;
  }
  
  .form-progress-bar {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    border-radius: 2px;
    transition: width 0.3s ease;
    width: 0%;
  }
  
  /* Validation Summary */
  .validation-summary {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    display: none;
  }
  
  .validation-summary.show {
    display: block;
  }
  
  .validation-summary h5 {
    color: var(--danger-color);
    margin-bottom: 10px;
    font-size: 1rem;
  }
  
  .validation-summary ul {
    margin: 0;
    padding-left: 20px;
  }
  
  .validation-summary li {
    color: var(--danger-color);
    font-size: 0.9rem;
  }

  /* ===== AVAILABLE COUPONS STYLES ===== */
  .available-coupons-section {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-radius: 15px;
    padding: 20px;
    margin-bottom: 20px;
    border: 2px solid #dee2e6;
    position: relative;
    overflow: hidden;
  }

  .available-coupons-section::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle, rgba(212, 175, 55, 0.1) 0%, transparent 50%);
    animation: couponGlow 4s ease-in-out infinite;
  }

  @keyframes couponGlow {
    0%, 100% { transform: scale(1) rotate(0deg); opacity: 0.3; }
    50% { transform: scale(1.1) rotate(180deg); opacity: 0.1; }
  }

  .available-coupons-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 15px;
    position: relative;
    z-index: 2;
  }

  .coupons-title {
    font-size: 18px;
    font-weight: 600;
    color: #2c3e50;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .coupons-title i {
    color: #d4af37;
    font-size: 20px;
    animation: bounce 2s infinite;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
  }

  .coupons-count {
    background: linear-gradient(135deg, #d4af37, #b8941f);
    color: white;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    box-shadow: 0 2px 10px rgba(212, 175, 55, 0.3);
  }

  .coupons-toggle {
    background: none;
    border: 2px solid #d4af37;
    color: #d4af37;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .coupons-toggle:hover {
    background: #d4af37;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(212, 175, 55, 0.4);
  }

  .available-coupons-list {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease-out;
    position: relative;
    z-index: 2;
  }

  .available-coupons-list.expanded {
    max-height: 1000px;
    transition: max-height 0.7s ease-in;
  }

  .coupon-item {
    background: white;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    padding: 15px;
    margin-bottom: 12px;
    position: relative;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .coupon-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(212, 175, 55, 0.2);
    border-color: #d4af37;
  }

  .coupon-item.premium {
    background: linear-gradient(135deg, #fff5e6 0%, #fffaf0 100%);
    border-color: #d4af37;
  }

  .coupon-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background: linear-gradient(to bottom, #d4af37, #b8941f);
  }

  .coupon-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 10px;
  }

  .coupon-info {
    flex: 1;
  }

  .coupon-title {
    font-size: 16px;
    font-weight: 600;
    color: #2c3e50;
    margin: 0 0 5px 0;
    line-height: 1.3;
  }

  .coupon-description {
    font-size: 12px;
    color: #6c757d;
    margin: 0;
    line-height: 1.4;
  }

  .coupon-value {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    text-align: right;
  }

  .discount-badge {
    background: linear-gradient(135deg, #28a745, #20c997);
    color: white;
    padding: 8px 12px;
    border-radius: 25px;
    font-weight: 700;
    font-size: 14px;
    margin-bottom: 5px;
    box-shadow: 0 3px 10px rgba(40, 167, 69, 0.3);
  }

  .coupon-type-badge {
    background: #f8f9fa;
    color: #495057;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 10px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .coupon-details {
    display: flex;
    justify-content: space-between;
    margin-bottom: 12px;
    font-size: 11px;
    color: #6c757d;
  }

  .coupon-detail-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .coupon-detail-label {
    font-weight: 500;
    margin-bottom: 2px;
    text-transform: uppercase;
    letter-spacing: 0.3px;
  }

  .coupon-detail-value {
    font-weight: 600;
    color: #2c3e50;
  }

  .coupon-code-section {
    background: #f8f9fa;
    border: 2px dashed #dee2e6;
    border-radius: 8px;
    padding: 10px;
    margin-bottom: 10px;
    text-align: center;
    position: relative;
  }

  .coupon-code-label {
    font-size: 10px;
    color: #6c757d;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 3px;
  }

  .coupon-code-value {
    font-family: 'Courier New', monospace;
    font-size: 16px;
    font-weight: 700;
    color: #2c3e50;
    letter-spacing: 2px;
    user-select: all;
  }

  .coupon-actions {
    display: flex;
    gap: 8px;
  }

  .coupon-apply-btn {
    flex: 1;
    background: linear-gradient(135deg, #d4af37, #b8941f);
    color: white;
    border: none;
    padding: 10px 16px;
    border-radius: 8px;
    font-weight: 600;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .coupon-apply-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(212, 175, 55, 0.4);
    background: linear-gradient(135deg, #b8941f, #d4af37);
  }

  .coupon-copy-btn {
    background: #f8f9fa;
    color: #6c757d;
    border: 2px solid #dee2e6;
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .coupon-copy-btn:hover {
    background: #e9ecef;
    border-color: #adb5bd;
    color: #495057;
  }

  .coupon-badges {
    position: absolute;
   top: 3px;
    right: 98px;
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .badge {
    padding: 4px 8px;
    border-radius: 15px;
    font-size: 10px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.3px;
  }

  .badge.new {
    background: linear-gradient(135deg, #28a745, #20c997);
    color: white;
  }

  .badge.expiring {
    background: linear-gradient(135deg, #ffc107, #ff8f00);
    color: white;
  }

  .badge.premium {
    background: linear-gradient(135deg, #6f42c1, #e83e8c);
    color: white;
  }

  .no-coupons-message {
    text-align: center;
    color: #6c757d;
    font-size: 14px;
    padding: 20px;
    font-style: italic;
  }

  .no-coupons-message i {
    font-size: 24px;
    margin-bottom: 10px;
    color: #adb5bd;
  }

  /* Responsive Design for Coupons */
  @media (max-width: 768px) {
    .available-coupons-section {
      padding: 15px;
    }

    .available-coupons-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }

    .coupon-header {
      flex-direction: column;
      gap: 10px;
    }

    .coupon-value {
      align-items: flex-start;
      text-align: left;
    }

    .coupon-details {
      flex-direction: column;
      gap: 8px;
    }

    .coupon-detail-item {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      text-align: left;
    }

    .coupon-actions {
      flex-direction: column;
    }
  }

  /* Animation for coupon reveal */
  .coupon-item {
    animation: slideInUp 0.3s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
  }

  @keyframes slideInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<div class="container py-5">
  <div class="row">
    <!-- Billing Address -->
    <div class="col-lg-8 mb-4">
      <div class="bg-white p-4 rounded shadow-sm">
        <h2 class="h4 mb-4">Shipping Address</h2>
        
        <!-- Address Selection Area -->
        <div class="form-group">
  <label for="existingAddress">Select Existing Address</label>
  <select id="existingAddress" name="addressId" class="form-control">
    <% if (addresses && addresses.address && addresses.address.length > 0) { %>
      <% addresses.address.forEach((address, index) => { %>
        <option value="<%= address._id %>" <%= index === 0 ? 'selected' : '' %>>
          <%= address.addressType %> - <%= address.name %>,
          <%= address.streetAddress %>, <%= address.city %>, <%= address.state %>, <%= address.country %>,
          <%= address.phone %>
        </option>
      <% }); %>
    <% } else { %>
      <option value="" selected disabled>No addresses available</option>
    <% } %>
  </select>
</div>

        
        <!-- New Address Dropdown -->
        <% if (!addresses || !addresses.address || addresses.address.length === 0) { %>
          <p class="mt-3">No addresses found. Please add a new address.</p>
        <% } %>
        <div class="dropdown-address">
          <a type="button" id="newAddressBtn" href="/checkout-add" class="add-address"> Add Adress</a>
          <!-- <button type="button" onclick="toggleAddressDropdown(event)" id="newAddressBtn" aria-expanded="false" aria-controls="addressDropdown">New Address</button> -->
          <div class="dropdown-address-content" id="addressDropdown">
            <!-- Form Progress Indicator -->
            <div class="form-progress">
              <div class="form-progress-bar" id="formProgressBar"></div>
            </div>
            
            <!-- Validation Summary -->
            <div class="validation-summary" id="validationSummary">
              <h5>Please fix the following errors:</h5>
              <ul id="validationSummaryList"></ul>
            </div>
            
            <form id="addressFormCheckout" method="POST" action="/addAddressCheckout">
              <div class="row mb-3">
                <div class="form-group col-md-6">
                  <label for="addressTypeCheckout" class="required">Address Type</label>
                  <input type="text" class="form-control" id="addressTypeCheckout" name="addressType" required 
                         placeholder="Home, Office, Other" maxlength="20">
                  <div class="validation-message" id="addressTypeCheckout-message"></div>
                  <div class="char-counter"><span id="addressTypeCheckout-count">0</span>/20</div>
                </div>
                <div class="form-group col-md-6">
                  <label for="nameCheckout" class="required">Full Name</label>
                  <input type="text" class="form-control" id="nameCheckout" name="name" required 
                         placeholder="Enter your full name" maxlength="50">
                  <div class="validation-message" id="nameCheckout-message"></div>
                  <div class="char-counter"><span id="nameCheckout-count">0</span>/50</div>
                </div>
              </div>
              <div class="row mb-3">
                <div class="form-group col-md-6">
                  <label for="countryCheckout" class="required">Country</label>
                  <select class="form-control" id="countryCheckout" name="country" required>
                    <option value="">Select Country</option>
                    <option value="India" selected>India</option>
                    <option value="Saudi Arabia">Saudi Arabia</option>
                  </select>
                  <div class="validation-message" id="countryCheckout-message"></div>
                </div>
                <div class="form-group col-md-6">
                  <label for="stateCheckout" class="required">State</label>
                  <select class="form-control" id="stateCheckout" name="state" required>
                    <option value="">Select State</option>
                    <option value="Andhra Pradesh">Andhra Pradesh</option>
                    <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                    <option value="Assam">Assam</option>
                    <option value="Bihar">Bihar</option>
                    <option value="Chhattisgarh">Chhattisgarh</option>
                    <option value="Goa">Goa</option>
                    <option value="Gujarat">Gujarat</option>
                    <option value="Haryana">Haryana</option>
                    <option value="Himachal Pradesh">Himachal Pradesh</option>
                    <option value="Jharkhand">Jharkhand</option>
                    <option value="Karnataka">Karnataka</option>
                    <option value="Kerala" selected>Kerala</option>
                    <option value="Madhya Pradesh">Madhya Pradesh</option>
                    <option value="Maharashtra">Maharashtra</option>
                    <option value="Manipur">Manipur</option>
                    <option value="Meghalaya">Meghalaya</option>
                    <option value="Mizoram">Mizoram</option>
                    <option value="Nagaland">Nagaland</option>
                    <option value="Odisha">Odisha</option>
                    <option value="Punjab">Punjab</option>
                    <option value="Rajasthan">Rajasthan</option>
                    <option value="Sikkim">Sikkim</option>
                    <option value="Tamil Nadu">Tamil Nadu</option>
                    <option value="Telangana">Telangana</option>
                    <option value="Tripura">Tripura</option>
                    <option value="Uttar Pradesh">Uttar Pradesh</option>
                    <option value="Uttarakhand">Uttarakhand</option>
                    <option value="West Bengal">West Bengal</option>
                    <option value="Delhi">Delhi</option>
                  </select>
                  <div class="validation-message" id="stateCheckout-message"></div>
                </div>
              </div>
              <div class="row mb-3">
                <div class="form-group col-md-6">
                  <label for="cityCheckout" class="required">City</label>
                  <input type="text" class="form-control" id="cityCheckout" name="city" required 
                         placeholder="Enter city name" maxlength="50">
                  <div class="validation-message" id="cityCheckout-message"></div>
                  <div class="char-counter"><span id="cityCheckout-count">0</span>/50</div>
                </div>
                <div class="form-group col-md-6">
                  <label for="landMarkCheckout">Landmark (Optional)</label>
                  <input type="text" class="form-control" id="landMarkCheckout" name="landMark" 
                         placeholder="Near landmark" maxlength="100">
                  <div class="validation-message" id="landMarkCheckout-message"></div>
                  <div class="char-counter"><span id="landMarkCheckout-count">0</span>/100</div>
                </div>
              </div>
              <div class="row mb-3">
                <div class="form-group col-md-6">
                  <label for="streetAddressCheckout" class="required">Street Address</label>
                  <input type="text" class="form-control" id="streetAddressCheckout" name="streetAddress" required 
                         placeholder="House no, Building, Street" maxlength="200">
                  <div class="validation-message" id="streetAddressCheckout-message"></div>
                  <div class="char-counter"><span id="streetAddressCheckout-count">0</span>/200</div>
                </div>
                <div class="form-group col-md-6">
                  <label for="pincodeCheckout" class="required">Pincode</label>
                  <input type="text" class="form-control" id="pincodeCheckout" name="pincode" required 
                         placeholder="6-digit pincode" maxlength="6" pattern="[1-9][0-9]{5}">
                  <div class="validation-message" id="pincodeCheckout-message"></div>
                </div>
              </div>
              <div class="row mb-3">
                <div class="form-group col-md-6">
                  <label for="phoneCheckout" class="required">Phone Number</label>
                  <input type="tel" class="form-control" id="phoneCheckout" name="phone" required 
                         placeholder="10-digit mobile number" maxlength="10" pattern="[6-9][0-9]{9}">
                  <div class="validation-message" id="phoneCheckout-message"></div>
                </div>
                <div class="form-group col-md-6">
                  <label for="emailCheckout" class="required">Email Address</label>
                  <input type="email" class="form-control" id="emailCheckout" name="email" required 
                         placeholder="your.email@example.com" maxlength="100">
                  <div class="validation-message" id="emailCheckout-message"></div>
                </div>
              </div>
              <div class="row mb-3">
                <div class="form-group col-md-6">
                  <label for="altPhoneCheckout">Alternate Phone (Optional)</label>
                  <input type="tel" class="form-control" id="altPhoneCheckout" name="altPhone" 
                         placeholder="Alternate mobile number" maxlength="10" pattern="[6-9][0-9]{9}">
                  <div class="validation-message" id="altPhoneCheckout-message"></div>
                </div>
              </div>
              <button type="submit" class="btn btn-primary" id="submitAddressBtn" disabled>Add Address</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Order Summary -->
    <div class="col-lg-4">
      <div class="order-summary">
        <h2 class="h4 mb-4">Your Order</h2>
        <div class="border-bottom pb-3 mb-3">
          <div class="d-flex justify-content-between mb-2">
            <span class="font-weight-bold">Products</span>
            <span class="font-weight-bold">Subtotal</span>
          </div>
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <% cart.items.forEach(function(item) { %>
              <div class="d-flex justify-content-between mb-2">
                <div class="d-flex align-items-center">
                  <img src="<%= item.productId && item.productId.productImage && item.productId.productImage.length > 0 ? item.productId.productImage[0] : '/images/placeholder.png' %>" alt="<%= item.productId && item.productId.productName ? item.productId.productName : 'Product' %>">
                  <div class="ml-2">
                    <p class="product-name mb-0">
                      <%= item.productId && item.productId.productName ? item.productId.productName.split('|')[0].trim() : 'Unknown Product' %> (x<%= item.quantity %>)
                    </p>
                  </div>
                </div>
                <span class="product-price">₹<%= (item.quantity * (item.productId && item.productId.salePrice ? item.productId.salePrice : 0)).toFixed(2) %></span>
              </div>
            <% }); %>
          <% } else { %>
            <div class="empty-cart-message">
              <p class="lead mb-4"><%= message || 'No items found in Cart' %></p>
            </div>
          <% } %>
        </div>
        
        <div class="border-bottom pb-3 mb-3">
          <div class="d-flex justify-content-between mb-2">
            <span>Subtotal</span>
            <span id="subtotal">₹<%= subtotal && !isNaN(subtotal) ? subtotal.toFixed(2) : '0.00' %></span>
          </div>
          <div class="d-flex justify-content-between mb-2">
            <span>Coupon Discount</span>
            <span id="couponDiscount">(-) ₹<%= couponDiscount && !isNaN(couponDiscount) ? couponDiscount.toFixed(2) : '0.00' %></span>
          </div>
          <div class="d-flex justify-content-between mb-2">
            <span>Shipping</span>
            <span id="shippingCharge">₹<%= shippingCharge && !isNaN(shippingCharge) ? shippingCharge.toFixed(2) : '0.00' %></span>
          </div>
          <div class="text-right text-primary mb-2">
            <a href="#" onclick="showShippingCharge(); return false;">View shipping charge</a>
          </div>
          <div class="d-flex justify-content-between font-weight-bold">
            <span>Total</span>
            <span class="total-price" id="grandTotal">₹<%= grandTotal && !isNaN(grandTotal) ? grandTotal.toFixed(2) : '0.00' %></span>
          </div>
        </div>
        <div class="mb-4">
          <h3 class="h5 mb-3">Payment Method</h3>
          <div class="mb-3">
            <label class="d-flex align-items-center">
              <input type="radio" name="payment" value="cod" class="mr-2" checked>
              <span><i class="fa-solid fa-money-bill-wheat" style="color: #c79b0c;"></i>  Cash on Delivery</span>
            </label>
            <label class="d-flex align-items-center">
              <input type="radio" name="payment" value="online" class="mr-2">
              <span><i class="fa-regular fa-credit-card" style="color: #c79b0c;"></i> Online Payment</span>
            </label>
            <label class="d-flex align-items-center">
              <input type="radio" name="payment" value="wallet" class="mr-2">
              <span><i class="fa-solid fa-wallet" style="color: #c79b0c;" ></i>  Wallet</span>
            </label>
          </div>
        </div>

        <!-- ===== AVAILABLE COUPONS SECTION ===== -->
        <% if (availableCoupons && availableCoupons.length > 0) { %>
          <div class="available-coupons-section">
            <div class="available-coupons-header">
              <div class="d-flex align-items-center">
                <h4 class="coupons-title">
                  <!-- <i class="fas fa-gift"></i> -->
                  Available Offers
                </h4>
                <span class="coupons-count ml-2"><%= availableCoupons.length %> Available</span>
              </div>
              <button type="button" class="coupons-toggle" onclick="toggleCouponsSection()">
                <span id="coupons-toggle-text">View All</span>
              </button>
            </div>
            
            <div class="available-coupons-list" id="available-coupons-list">
              <% availableCoupons.forEach((coupon, index) => { %>
                <div class="coupon-item <%= coupon.isPremium ? 'premium' : '' %>" style="animation-delay: <%= index * 0.1 %>s">
                  <div class="coupon-badges">
                    <% if (coupon.isNew) { %>
                      <span class="badge new">New</span>
                    <% } %>
                    <% if (coupon.isExpiringSoon) { %>
                      <span class="badge expiring"><%= coupon.daysLeft %> Days</span>
                    <% } %>
                    <% if (coupon.isPremium) { %>
                      <span class="badge premium">Premium</span>
                    <% } %>
                  </div>
                  
                  <div class="coupon-header">
                    <div class="coupon-info">
                      <h5 class="coupon-title"><%= coupon.title %></h5>
                      <p class="coupon-description"><%= coupon.description %></p>
                    </div>
                    
                    <div class="coupon-value">
                      <div class="discount-badge">
                        <%= coupon.discountValue %><%= coupon.type === 'percentage' ? '%' : '' %> OFF
                      </div>
                      <div class="coupon-type-badge">
                        <%= coupon.type === 'percentage' ? 'Percentage' : 
                            coupon.type === 'fixed' ? 'Fixed Amount' : 
                            coupon.type === 'shipping' ? 'Free Shipping' : 'Special Offer' %>
                      </div>
                    </div>
                  </div>
                  
                  <div class="coupon-details">
                    <div class="coupon-detail-item">
                      <div class="coupon-detail-label">Min Order</div>
                      <div class="coupon-detail-value">₹<%= coupon.minOrder %></div>
                    </div>
                    <div class="coupon-detail-item">
                      <div class="coupon-detail-label">Max Discount</div>
                      <div class="coupon-detail-value">₹<%= coupon.maxDiscount %></div>
                    </div>
                    <div class="coupon-detail-item">
                      <div class="coupon-detail-label">Valid Until</div>
                      <div class="coupon-detail-value"><%= new Date(coupon.expireOn).toLocaleDateString('en-GB') %></div>
                    </div>
                    <div class="coupon-detail-item">
                      <div class="coupon-detail-label">Used</div>
                      <div class="coupon-detail-value"><%= coupon.usedCount %>/<%= coupon.usageLimit %></div>
                    </div>
                  </div>
                  
                  <div class="coupon-code-section" onclick="copyCouponCodeFromList('<%= coupon.code %>')" title="Click to copy">
                    <div class="coupon-code-label">Coupon Code</div>
                    <div class="coupon-code-value"><%= coupon.code %></div>
                  </div>
                  
                  <div class="coupon-actions">
                    <button type="button" class="coupon-apply-btn" onclick="applyCouponFromList('<%= coupon.code %>')">
                      Apply Now
                    </button>
                    <button type="button" class="coupon-copy-btn" onclick="copyCouponCodeFromList('<%= coupon.code %>')">
                      <i class="fas fa-copy"></i>
                    </button>
                  </div>
                </div>
              <% }); %>
            </div>
          </div>
        <% } %>

        <div class="mb-4">
          <h3 class="h5 mb-3">Apply Coupon</h3>
          <div class="input-group mb-3">
            <input type="text" id="couponCode" class="form-control" placeholder="Enter coupon code" name="code">
            <div class="input-group-append">
              <button class="btn apply-btn" type="button" onclick="applyCoupon()">Apply</button>
            </div>
          </div>
          <!-- <a href="/coupon">view all coupons</a>  -->

          <div id="appliedCouponInfo" class="coupon-applied" style="display: none;">
            <span id="appliedCouponText"></span>
            <button type="button" class="remove-coupon-btn" onclick="removeCoupon()">Remove</button>
          </div>
        </div>
        <button class="btn place-order-btn btn-secondary w-100" id="placeOrderBtn" <%= cart && cart.items && cart.items.length === 0 ? 'disabled' : '' %>>Place Order</button>
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
  let appliedCouponData = null;
  let validationState = {};
  let validationTimeouts = {};

  // Initialize validation system
  document.addEventListener('DOMContentLoaded', function() {
    initializeValidation();
    calculateAndDisplaySubtotal();
    // Auto-retry: if redirected with ?retry=1, switch to online and trigger flow
    const params = new URLSearchParams(window.location.search);
    if (params.get('retry') === '1') {
      const onlineRadio = document.querySelector('input[name="payment"][value="online"]');
      if (onlineRadio) onlineRadio.checked = true;
      // Trigger after a short delay to ensure DOM  ready ayo nn
      setTimeout(() => {
        const btn = document.getElementById('placeOrderBtn');
        if (btn && !btn.disabled) {
          placeOrder();
        }
      }, 200);
    }
  });

  function initializeValidation() {
    const form = document.getElementById('addressFormCheckout');
    const fields = form.querySelectorAll('input[required], input[name="altPhone"], input[name="landMark"]');
    
    fields.forEach(field => {
      const fieldName = field.name;
      validationState[fieldName] = false;
      
      // Add event listeners for real-time validation
      field.addEventListener('input', function() {
        updateCharacterCount(field);
        debounceValidation(field);
      });
      
      field.addEventListener('blur', function() {
        validateField(field, true);
      });
      
      // Initialize character counters
      updateCharacterCount(field);
    });
    
    // Special handling for select fields
    const selectFields = form.querySelectorAll('select[required]');
    selectFields.forEach(field => {
      const fieldName = field.name;
      validationState[fieldName] = false;
      
      field.addEventListener('change', function() {
        validateField(field, true);
      });
    });
    
    updateFormProgress();
    updateSubmitButton();
  }

  function debounceValidation(field, delay = 500) {
    const fieldName = field.name;
    
    // Clear existing timeout
    if (validationTimeouts[fieldName]) {
      clearTimeout(validationTimeouts[fieldName]);
    }
    
    // Show checking state immediately for important fields
    if (['phone', 'email'].includes(fieldName)) {
      setFieldState(field, 'checking', 'Checking...');
    }
    
    // Set new timeout
    validationTimeouts[fieldName] = setTimeout(() => {
      validateField(field, false);
    }, delay);
  }

  async function validateField(field, showImmediate = false) {
    const fieldName = field.name;
    const value = field.value.trim();
    
    // Clear any existing timeout
    if (validationTimeouts[fieldName]) {
      clearTimeout(validationTimeouts[fieldName]);
      delete validationTimeouts[fieldName];
    }
    
    let isValid = true;
    let message = '';
    
    // Required field validation
    if (field.hasAttribute('required') && !value) {
      isValid = false;
      message = `${getFieldLabel(fieldName)} is required`;
    } else if (value) {
      // Field-specific validation
      const validationResult = await validateFieldValue(fieldName, value);
      isValid = validationResult.valid;
      message = validationResult.message;
    }
    
    // Update validation state
    validationState[fieldName] = isValid;
    
    // Update UI
    if (showImmediate || isValid || message) {
      setFieldState(field, isValid ? 'valid' : 'invalid', message);
    }
    
    updateFormProgress();
    updateSubmitButton();
    updateValidationSummary();
    
    return isValid;
  }

  async function validateFieldValue(fieldName, value) {
    const validators = {
      addressType: (val) => {
        if (val.length < 2 || val.length > 20) return { valid: false, message: 'Address type should be 2-20 characters' };
        if (!/^[a-zA-Z\s]+$/.test(val)) return { valid: false, message: 'Address type should contain only letters and spaces' };
        return { valid: true, message: 'Valid address type' };
      },
      
      name: (val) => {
        if (val.length < 2 || val.length > 50) return { valid: false, message: 'Name should be 2-50 characters' };
        if (!/^[a-zA-Z\s]+$/.test(val)) return { valid: false, message: 'Name should contain only letters and spaces' };
        return { valid: true, message: 'Valid name' };
      },
      
      city: (val) => {
        if (val.length < 2 || val.length > 50) return { valid: false, message: 'City should be 2-50 characters' };
        if (!/^[a-zA-Z\s]+$/.test(val)) return { valid: false, message: 'City should contain only letters and spaces' };
        return { valid: true, message: 'Valid city' };
      },
      
      streetAddress: (val) => {
        if (val.length < 5 || val.length > 200) return { valid: false, message: 'Street address should be 5-200 characters' };
        if (!/^[a-zA-Z0-9\s,.-]+$/.test(val)) return { valid: false, message: 'Street address contains invalid characters' };
        return { valid: true, message: 'Valid street address' };
      },
      
      landMark: (val) => {
        if (val && val.length > 100) return { valid: false, message: 'Landmark should be max 100 characters' };
        if (val && !/^[a-zA-Z0-9\s,.-]*$/.test(val)) return { valid: false, message: 'Landmark contains invalid characters' };
        return { valid: true, message: val ? 'Valid landmark' : '' };
      },
      
      pincode: (val) => {
        if (!/^[1-9][0-9]{5}$/.test(val)) return { valid: false, message: 'Invalid pincode format (6 digits, not starting with 0)' };
        return { valid: true, message: 'Valid pincode' };
      },
      
      phone: async (val) => {
        if (!/^[6-9]\d{9}$/.test(val)) return { valid: false, message: 'Phone number should be 10 digits starting with 6-9' };
        
        // Check for duplicate phone numbers via API
        try {
          const response = await fetch('/validateAddressField', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ field: 'phone', value: val, userId: '<%= user && user._id ? user._id : "" %>' })
          });
          const result = await response.json();
          return result;
        } catch (error) {
          return { valid: true, message: 'Valid phone number' }; // Fallback to client-side validation
        }
      },
      
      altPhone: (val) => {
        if (val && !/^[6-9]\d{9}$/.test(val)) return { valid: false, message: 'Alternate phone should be 10 digits starting with 6-9' };
        return { valid: true, message: val ? 'Valid alternate phone' : '' };
      },
      
      email: (val) => {
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        if (!emailRegex.test(val)) return { valid: false, message: 'Please enter a valid email address' };
        return { valid: true, message: 'Valid email address' };
      },
      
      country: (val) => {
        if (val !== 'India') return { valid: false, message: 'Currently, we only support Indian addresses' };
        return { valid: true, message: 'Valid country' };
      },
      
      state: (val) => {
        if (!val) return { valid: false, message: 'Please select a state' };
        return { valid: true, message: 'Valid state' };
      }
    };
    
    const validator = validators[fieldName];
    if (validator) {
      return await validator(value);
    }
    
    return { valid: true, message: '' };
  }

  function setFieldState(field, state, message) {
    const messageElement = document.getElementById(`${field.id}-message`);
    
    // Remove all validation classes
    field.classList.remove('is-valid', 'is-invalid', 'is-checking');
    if (messageElement) {
      messageElement.classList.remove('valid', 'invalid', 'checking');
    }
    
    // Add appropriate class and message
    if (state === 'valid' && message) {
      field.classList.add('is-valid');
      if (messageElement) {
        messageElement.classList.add('valid');
        messageElement.textContent = message;
      }
    } else if (state === 'invalid') {
      field.classList.add('is-invalid');
      if (messageElement) {
        messageElement.classList.add('invalid');
        messageElement.textContent = message;
      }
    } else if (state === 'checking') {
      field.classList.add('is-checking');
      if (messageElement) {
        messageElement.classList.add('checking');
        messageElement.textContent = message;
      }
    }
  }

  function updateCharacterCount(field) {
    const counterElement = document.getElementById(`${field.id}-count`);
    if (counterElement) {
      const currentLength = field.value.length;
      const maxLength = field.getAttribute('maxlength');
      
      counterElement.textContent = currentLength;
      
      const counterContainer = counterElement.parentElement;
      counterContainer.classList.remove('warning', 'danger');
      
      if (maxLength) {
        const percentage = (currentLength / maxLength) * 100;
        if (percentage >= 90) {
          counterContainer.classList.add('danger');
        } else if (percentage >= 75) {
          counterContainer.classList.add('warning');
        }
      }
    }
  }

  function updateFormProgress() {
    const totalFields = Object.keys(validationState).length;
    const validFields = Object.values(validationState).filter(valid => valid).length;
    const progress = totalFields > 0 ? (validFields / totalFields) * 100 : 0;
    
    const progressBar = document.getElementById('formProgressBar');
    if (progressBar) {
      progressBar.style.width = `${progress}%`;
    }
  }

  function updateSubmitButton() {
    const submitBtn = document.getElementById('submitAddressBtn');
    const requiredFields = ['addressType', 'name', 'country', 'state', 'city', 'streetAddress', 'pincode', 'phone', 'email'];
    const isFormValid = requiredFields.every(field => validationState[field] === true);
    
    submitBtn.disabled = !isFormValid;
    
    if (isFormValid) {
      submitBtn.textContent = 'Add Address';
      submitBtn.classList.remove('btn-secondary');
      submitBtn.classList.add('btn-primary');
    } else {
      submitBtn.textContent = 'Please complete the form';
      submitBtn.classList.remove('btn-primary');
      submitBtn.classList.add('btn-secondary');
    }
  }

  function updateValidationSummary() {
    const summaryElement = document.getElementById('validationSummary');
    const listElement = document.getElementById('validationSummaryList');
    
    if (!summaryElement || !listElement) return;
    
    const errors = [];
    
    Object.keys(validationState).forEach(fieldName => {
      if (validationState[fieldName] === false) {
        const field = document.querySelector(`[name="${fieldName}"]`);
        const messageElement = document.getElementById(`${field.id}-message`);
        if (messageElement && messageElement.textContent.trim()) {
          errors.push(messageElement.textContent);
        }
      }
    });
    
    if (errors.length > 0) {
      listElement.innerHTML = errors.map(error => `<li>${error}</li>`).join('');
      summaryElement.classList.add('show');
    } else {
      summaryElement.classList.remove('show');
    }
  }

  function getFieldLabel(fieldName) {
    const labels = {
      addressType: 'Address Type',
      name: 'Full Name',
      country: 'Country',
      state: 'State',
      city: 'City',
      landMark: 'Landmark',
      streetAddress: 'Street Address',
      pincode: 'Pincode',
      phone: 'Phone Number',
      email: 'Email Address',
      altPhone: 'Alternate Phone'
    };
    return labels[fieldName] || fieldName;
  }

  // Calculate subtotal from cart items on page load
  function calculateSubtotal() {
    const cartItems = <%- JSON.stringify(cart && cart.items ? cart.items : []) %>;
    let subtotal = 0;
    
    cartItems.forEach(item => {
      if (item.productId && item.productId.salePrice && item.quantity > 0) {
        subtotal += item.quantity * item.productId.salePrice;
      }
    });
    
    console.log('Calculated subtotal:', subtotal);
    return subtotal;
  }

  function calculateAndDisplaySubtotal() {
    const calculatedSubtotal = calculateSubtotal();
    const subtotalElement = document.getElementById('subtotal');
    const grandTotalElement = document.getElementById('grandTotal');
    const shippingCharge = <%= shippingCharge || 50 %>;
    
    subtotalElement.textContent = `₹${calculatedSubtotal.toFixed(2)}`;
    grandTotalElement.textContent = `₹${(calculatedSubtotal + shippingCharge).toFixed(2)}`;
  }

  function toggleAddressDropdown(event) {
    event.preventDefault();
    event.stopPropagation();
    const dropdown = document.getElementById('addressDropdown');
    const button = document.getElementById('newAddressBtn');
    const isExpanded = dropdown.classList.toggle('show');
    button.setAttribute('aria-expanded', isExpanded);
  }

  document.addEventListener('click', function(event) {
    const dropdown = document.getElementById('addressDropdown');
    const button = document.getElementById('newAddressBtn');
    if (!dropdown.contains(event.target) && !button.contains(event.target)) {
      dropdown.classList.remove('show');
      button.setAttribute('aria-expanded', 'false');
    }
  });

  function showShippingCharge() {
    Swal.fire({
      title: 'Shipping Charge',
      text: 'Delivery charge is ₹50 per order.',
      icon: 'info',
      confirmButtonText: 'OK'
    });
  }

  // ===== AVAILABLE COUPONS FUNCTIONALITY =====

  function toggleCouponsSection() {
    const couponsListElement = document.getElementById('available-coupons-list');
    const toggleText = document.getElementById('coupons-toggle-text');
    
    if (couponsListElement.classList.contains('expanded')) {
      couponsListElement.classList.remove('expanded');
      toggleText.textContent = 'View All';
    } else {
      couponsListElement.classList.add('expanded');
      toggleText.textContent = 'Hide';
      
      // Add staggered animation to coupon items
      const couponItems = couponsListElement.querySelectorAll('.coupon-item');
      couponItems.forEach((item, index) => {
        item.style.animationDelay = `${index * 0.1}s`;
      });
    }
  }

  function copyCouponCodeFromList(code) {
    navigator.clipboard.writeText(code).then(() => {
      showNotification(`Coupon code "${code}" copied to clipboard!`, 'success');
    }).catch(() => {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = code;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      showNotification(`Coupon code "${code}" copied!`, 'success');
    });
  }

  function applyCouponFromList(code) {
    // Set the code in the input field
    document.getElementById('couponCode').value = code;
    
    // Apply the coupon
    applyCoupon();
  }

  function showNotification(message, type = 'success') {
    // Use SweetAlert for consistent notifications
    const icon = type === 'success' ? 'success' : 
                type === 'error' ? 'error' : 
                type === 'warning' ? 'warning' : 'info';
    
    Swal.fire({
      toast: true,
      position: 'top-end',
      icon: icon,
      title: message,
      showConfirmButton: false,
      timer: 3000,
      timerProgressBar: true
    });
  }

  async function applyCoupon() {
    const couponCode = document.getElementById('couponCode').value.trim();
    const applyBtn = document.querySelector('.apply-btn');
    const subtotalElement = document.getElementById('subtotal');
    const couponDiscountElement = document.getElementById('couponDiscount');
    const shippingChargeElement = document.getElementById('shippingCharge');
    const grandTotalElement = document.getElementById('grandTotal');
    const appliedCouponInfo = document.getElementById('appliedCouponInfo');
    const appliedCouponText = document.getElementById('appliedCouponText');

    if (!couponCode) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Please enter a coupon code',
        confirmButtonText: 'OK'
      });
      return;
    }

    // Add loading state to apply button
    applyBtn.classList.add('loading');
    applyBtn.disabled = true;
    applyBtn.textContent = 'Applying...';

    try {
      const response = await fetch('/coupon/apply', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ code: couponCode })
      });
      
      const result = await response.json();
      console.log('Apply coupon result:', result);

      if (result.success) {
        appliedCouponData = result.coupon;
        
        // Show success message
        Swal.fire({
          icon: 'success',
          title: 'Coupon Applied!',
          text: `Coupon "${couponCode}" applied successfully!`,
          confirmButtonText: 'OK'
        });

        // Get current subtotal
        let subtotal = calculateSubtotal();
        let originalShippingCharge = <%= shippingCharge || 50 %>;
        let shippingCharge = originalShippingCharge;
        let couponDiscount = 0;

        const { type, discountValue, minOrder, maxDiscount } = appliedCouponData;

        // Validate minimum order requirement
        if (subtotal < minOrder) {
          throw new Error(`Minimum order amount of ₹${minOrder} required for this coupon`);
        }

        // Calculate discount based on coupon type
        if (type === 'percentage') {
          couponDiscount = Math.min((subtotal * discountValue) / 100, maxDiscount || Number.MAX_SAFE_INTEGER);
        } else if (type === 'fixed') {
          couponDiscount = Math.min(discountValue, maxDiscount || Number.MAX_SAFE_INTEGER);
        } else if (type === 'shipping') {
          shippingCharge = 0;
          couponDiscount = originalShippingCharge;
        } else if (type === 'bogo') {
          const cartItems = <%- JSON.stringify(cart && cart.items ? cart.items : []) %>;
          if (cartItems.length > 1) {
            const prices = cartItems.map(item => item.productId.salePrice * item.quantity);
            couponDiscount = Math.min(...prices);
          } else {
            throw new Error('BOGO coupon requires at least two items in the cart');
          }
        }

        // Update UI
        couponDiscountElement.textContent = `(-) ₹${couponDiscount.toFixed(2)}`;
        shippingChargeElement.textContent = `₹${shippingCharge.toFixed(2)}`;
        const grandTotal = subtotal - couponDiscount + shippingCharge;
        grandTotalElement.textContent = `₹${grandTotal.toFixed(2)}`;

        // Show applied coupon info
        appliedCouponText.textContent = `Applied: ${couponCode} (-₹${couponDiscount.toFixed(2)})`;
        appliedCouponInfo.style.display = 'block';
        
        // Hide coupon input
        document.getElementById('couponCode').value = '';
        document.getElementById('couponCode').disabled = true;
        applyBtn.disabled = true;
        applyBtn.textContent = 'Applied';

      } else {
        throw new Error(result.message || 'The coupon is invalid or expired');
      }
    } catch (error) {
      console.error('Error applying coupon:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to apply coupon',
        confirmButtonText: 'OK'
      });
    } finally {
      // Remove loading state if not applied
      if (!appliedCouponData) {
        applyBtn.classList.remove('loading');
        applyBtn.disabled = false;
        applyBtn.textContent = 'Apply';
      }
    }
  }

  async function removeCoupon() {
    try {
      const response = await fetch('/coupon/remove', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const result = await response.json();

      if (result.success) {
        // Reset UI
        const subtotalElement = document.getElementById('subtotal');
        const couponDiscountElement = document.getElementById('couponDiscount');
        const shippingChargeElement = document.getElementById('shippingCharge');
        const grandTotalElement = document.getElementById('grandTotal');
        const appliedCouponInfo = document.getElementById('appliedCouponInfo');
        const applyBtn = document.querySelector('.apply-btn');

        // Reset values
        let subtotal = calculateSubtotal();
        let shippingCharge = <%= shippingCharge || 50 %>;
        
        subtotalElement.textContent = `₹${subtotal.toFixed(2)}`;
        couponDiscountElement.textContent = '(-) ₹0.00';
        shippingChargeElement.textContent = `₹${shippingCharge.toFixed(2)}`;
        grandTotalElement.textContent = `₹${(subtotal + shippingCharge).toFixed(2)}`;

        // Hide applied coupon info
        appliedCouponInfo.style.display = 'none';
        
        // Enable coupon input
        document.getElementById('couponCode').disabled = false;
        applyBtn.disabled = false;
        applyBtn.textContent = 'Apply';
        
        // Clear global variable
        appliedCouponData = null;

        Swal.fire({
          icon: 'success',
          title: 'Coupon Removed',
          text: 'Coupon has been removed successfully.',
          timer: 1500,
          timerProgressBar: true
        });
      }
    } catch (error) {
      console.error('Error removing coupon:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to remove coupon',
        confirmButtonText: 'OK'
      });
    }
  }

  async function placeOrder() {
    const selectedAddress = document.getElementById('existingAddress').value;
    const paymentMethod = document.querySelector('input[name="payment"]:checked').value;
    const couponCode = appliedCouponData ? appliedCouponData.code : null;
    const placeOrderBtn = document.getElementById('placeOrderBtn');

    if (!selectedAddress || selectedAddress === '') {
      Swal.fire('Error', 'Please select a shipping address', 'error');
      return;
    }

    // Add loading state
    placeOrderBtn.classList.add('loading');
    placeOrderBtn.disabled = true;
    placeOrderBtn.textContent = 'Processing...';

    try {
      if (paymentMethod === 'online') {
        // Create Razorpay order
        const response = await fetch('/createCheckoutOrder', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            addressId: selectedAddress,
            couponCode: couponCode
          }),
        });

        const orderData = await response.json();

        if (!orderData.success) {
          throw new Error(orderData.message || 'Failed to create payment order');
        }

        // Initialize Razorpay
        const options = {
          key: orderData.key_id,
          amount: orderData.amount,
          currency: orderData.currency,
          name: 'SAWAX Store',
          description: 'Order Payment',
          order_id: orderData.order_id,
          handler: async function(response) {
            try {
              // Verify payment
              const verifyResponse = await fetch('/verifyCheckoutPayment', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  razorpay_order_id: response.razorpay_order_id,
                  razorpay_payment_id: response.razorpay_payment_id,
                  razorpay_signature: response.razorpay_signature
                })
              });

              const verifyData = await verifyResponse.json();

              if (verifyData.success) {
                await Swal.fire({
                  icon: 'success',
                  title: 'Payment Successful!',
                  text: `${verifyData.totalOrders} order(s) placed successfully!`,
                  timer: 2000,
                  timerProgressBar: true
                });
                // Redirect to order-success page with the first orderId
                window.location.href = `/order-success/${verifyData.orders[0].orderId}`;
              } else {
                throw new Error(verifyData.message || 'Payment verification failed');
              }
            } catch (error) {
              console.error('Error verifying payment:', error);
              Swal.fire({
                icon: 'error',
                title: 'Payment Verification Failed',
                text: error.message || 'Please contact support if money was debited.',
                confirmButtonText: 'OK'
              });
            }
          },
          prefill: {
            name: orderData.user.name,
            email: orderData.user.email
          },
          theme: {
            color: '#d4af37'
          },
          modal: {
            ondismiss: function() {
              // Remove loading state
              placeOrderBtn.classList.remove('loading');
              placeOrderBtn.disabled = false;
              placeOrderBtn.textContent = 'Place Order';
            }
          }
        };

        const rzp = new Razorpay(options);
        // Handle payment failure: redirect to error page with context
        rzp.on('payment.failed', function () {
          window.location.href = '/errorpage?type=payment_failed';
        });
        rzp.open();

      } else {
        // Handle COD and Wallet payments
        const orderData = {
          addressId: selectedAddress,
          paymentMethod: paymentMethod,
          couponCode: couponCode
        };

        const response = await fetch('/placeOrder', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(orderData),
        });

        const data = await response.json();

        if (data.success) {
          await Swal.fire({
            icon: 'success',
            title: 'Order Placed Successfully!',
            text: `${data.totalOrders} order(s) placed successfully!`,
            timer: 2000,
            timerProgressBar: true
          });
          // Redirect to order-success page with the first orderId
          window.location.href = `/order-success/${data.orders[0].orderId}`;
        } else {
          throw new Error(data.message || 'Failed to place order');
        }
      }
    } catch (error) {
      console.error('Error placing order:', error);
      Swal.fire({
        icon: 'error',
        title: 'Order Failed',
        text: error.message || 'An error occurred while placing the order',
        confirmButtonText: 'OK'
      });
    } finally {
      // Remove loading state
      placeOrderBtn.classList.remove('loading');
      placeOrderBtn.disabled = false;
      placeOrderBtn.textContent = 'Place Order';
    }
  }

  document.getElementById('placeOrderBtn').onclick = placeOrder;

  // Handle address form submission with enhanced validation
  document.getElementById('addressFormCheckout').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = document.getElementById('submitAddressBtn');
    
    // Validate all fields one more time before submission
    const form = this;
    const fields = form.querySelectorAll('input, select');
    let isFormValid = true;
    
    for (const field of fields) {
      const isValid = await validateField(field, true);
      if (!isValid && (field.hasAttribute('required') || field.value.trim())) {
        isFormValid = false;
      }
    }
    
    if (!isFormValid) {
      Swal.fire({
        icon: 'error',
        title: 'Validation Error',
        text: 'Please fix the errors in the form before submitting.',
        confirmButtonText: 'OK'
      });
      return;
    }
    
    const formData = new FormData(this);
    const addressData = Object.fromEntries(formData);

    // Add loading state
    submitBtn.classList.add('loading');
    submitBtn.disabled = true;
    submitBtn.textContent = 'Adding Address...';

    try {
      const response = await fetch('/addAddressCheckout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(addressData),
      });

      const data = await response.json();

      if (data.success) {
        await Swal.fire({
          icon: 'success',
          title: 'Address Added!',
          text: 'Address has been added successfully.',
          timer: 1500,
          timerProgressBar: true
        });
        location.reload();
      } else {
        throw new Error(data.message || 'Failed to add address');
      }
    } catch (error) {
      console.error('Error adding address:', error);
      
      let errorMessage = error.message || 'Failed to add address';
      
      // Handle validation errors from server
      if (error.response && error.response.errors) {
        errorMessage = error.response.errors.join(', ');
      }
      
      Swal.fire({
        icon: 'error',
        title: 'Error Adding Address',
        text: errorMessage,
        confirmButtonText: 'OK'
      });
    } finally {
      // Remove loading state
      submitBtn.classList.remove('loading');
      updateSubmitButton(); // This will set the proper state
    }
  });
</script>


