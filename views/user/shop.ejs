<%- include("../../views/partials/user/header") %>

<link rel="stylesheet" href="/css/shop.css">
<title>SAWAX | Shop Premium Watches</title>

<style>
    :root {
        --primary: #1a1a1a;
        --secondary: #f8f8f8;
        --accent: #d4af37;
        --text: #333;
        --light-text: #777;
        --border: #e0e0e0;
    }

    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
        gap: 20px;
        padding: 20px;
    }

    .product-card {
        border: 1px solid var(--border);
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        background: #fff;
        transition: transform 0.2s ease-in-out;
    }

    .product-card:hover {
        transform: scale(1.02);
    }

    .product-image img {
        width: 100%;
        height: 299px;
        object-fit: cover;
    }

    .product-details {
        padding: 15px;
    }

    .product-name {
        font-size: 18px;
        font-weight: 600;
        color: var(--primary);
    }

    .product-price {
        color: var(--accent);
        font-size: 16px;
        margin-top: 5px;
    }

    .view-button {
        font-weight: 600;
        font-size: small;
        margin-top: 10px;
        display: inline-block;
        padding: 8px 12px;
        background: linear-gradient(135deg,#d4af37, #e7bc3a);
        color: var(--primary);
        border-radius: 10px;
        text-decoration: none;
    }

    .view-button:hover {
        background: linear-gradient(135deg,#e6ba2b, #ffc20a);
    }

    .wishlist-btn:hover{
        color:red
    }
    .wishlist-btn i.wishlist-active{ color:red; }

    .shop-sidebar {
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .sidebar-section {
        margin-bottom: 20px;
    }

    .sidebar-title {
        font-size: 18px;
        font-weight: 600;
        color: var(--primary);
        margin-bottom: 10px;
    }

    .search-container {
        display: flex;
        align-items: center;
        border: 1px solid var(--border);
        border-radius: 20px;
        overflow: hidden;
    }

    .search-input {
        border: none;
        padding: 8px;
        flex: 1;
        outline: none;
        font-size: 14px;
    }

    .search-btn {
        background: linear-gradient(135deg,#e6ba2b, #ffc20a);;
        border: none;
        padding: 8px 12px;
        color: white;
        cursor: pointer;
        transition: background 0.3s;
    }

    .search-btn:hover {
        background: linear-gradient(135deg,#e6ba2b, #ffc20a);;
        color: #000000;
    }

    .category-list {
        list-style: none;
        padding: 0;
    }

    .category-item {
        margin-bottom: 10px;
    }

    .category-link {
        color: var(--text);
        font-size: 14px;
        text-decoration: none;
        display: flex;
        justify-content: space-between;
        transition: color 0.3s;
        cursor: pointer;
    }

    .category-link:hover {
        color: var(--accent);
    }

    .category-link.active {
        color: var(--accent);
        font-weight: 600;
    }

    .filter-group {
        margin-bottom: 15px;
    }

    .filter-group-title {
        font-size: 16px;
        color: var(--primary);
        margin-bottom: 10px;
    }

    .price-range {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .range-slider {
        width: 100%;
    }

    .price-inputs {
        display: flex;
        gap: 10px;
    }

    .price-input {
        width: 50%;
        padding: 8px;
        border: 1px solid var(--border);
        border-radius: 4px;
        font-size: 14px;
    }

    .alpha-filter {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .alpha-checkbox {
        display: none;
    }

    .alpha-label {
        padding: 5px 10px;
        border: 1px solid var(--border);
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        color: var(--text);
        transition: background 0.3s, color 0.3s;
    }

    .alpha-checkbox:checked + .alpha-label {
        background: var(--accent);
        color: var(--primary);
    }

    .apply-filter {
         background: linear-gradient(135deg,#d4af37, #000000);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 10px;
        cursor: pointer;
        font-weight: 600;
        text-transform: uppercase;
        transition: background 0.3s;
    }

    .apply-filter:hover {
        background: linear-gradient(135deg,#ffcd2a, #b29434);
        
    }

    .shop-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .sort-select {
        padding: 8px;
        border: 1px solid var(--border);
        border-radius: 4px;
        font-size: 14px;
    }

    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        gap: 5px;
    }

    .pagination a {
        padding: 8px 12px;
        border: 1px solid var(--border);
        border-radius: 4px;
        color: var(--text);
        text-decoration: none;
        transition: background 0.3s;
        cursor: pointer;
    }

    .pagination a:hover, .pagination a.active {
        background: var(--accent);
        color: var(--primary);
        border-color: var(--accent);
    }

    .reset-filters {
        background: transparent;
        border: 1px solid var(--accent);
        color: var(--accent);
        padding: 8px 16px;
        border-radius: 15px;
        cursor: pointer;
        font-size: 10px;
        margin-top: 10px;
        transition: background 0.3s, color 0.3s;
    }

    .reset-filters:hover {
        background: #d4af37;
        color: white;
       
    }

    .loading {
        text-align: center;
        padding: 20px;
        color: var(--light-text);
    }

    .shop-layout {
        display: grid;
        grid-template-columns: 250px 1fr;
        gap: 30px;
    }

    @media (max-width: 768px) {
        .shop-layout {
            grid-template-columns: 1fr;
        }
        
        .shop-sidebar {
            order: 2;
        }
        
        .shop-products {
            order: 1;
        }
    }
</style>

<section class="page-title">
    <div class="container">
        <h1>Our Collection</h1>
        <p>Discover exceptional timepieces crafted for distinction</p>
    </div>
</section>

<section class="shop-section">
    <div class="container">
        <div class="shop-layout">
            <!-- Sidebar -->
            <div class="shop-sidebar">
                <div class="sidebar-section">
                    <h3 class="sidebar-title">Search</h3>
                    <form id="search-form">
                        <div class="search-container">
                            <input type="text" name="query" id="search-input" class="search-input" placeholder="Search watches..." value="<%= searchQuery || '' %>">
                            <button type="submit" class="search-btn"><i class="fa-solid fa-magnifying-glass"></i></button>
                        </div>
                    </form>
                </div>

                <div class="sidebar-section">
                    <h3 class="sidebar-title">Categories</h3>
                    <ul class="category-list">
                        <li class="category-item">
                            <a class="category-link" data-category="" onclick="filterByCategory('')">
                                <span>All Categories</span>
                                <span class="category-count">(<%= totalProducts %>)</span>
                            </a>
                        </li>
                        <% category.forEach(cat => { %>
                            <li class="category-item">
                                <a class="category-link" data-category="<%= cat._id %>" onclick="filterByCategory('<%= cat._id %>')">
                                    <span><%= cat.name %></span>
                                    <span class="category-count">(<%= cat.productCount || 0 %>)</span>
                                </a>
                            </li>
                        <% }) %>
                    </ul>
                </div>

                <div class="sidebar-section">
                    <h3 class="sidebar-title">Price Range</h3>
                    <div class="price-range">
                        <div class="price-inputs">
                            <input type="number" id="minPriceInput" class="price-input" placeholder="Min" value="<%= minPrice || '' %>" min="0">
                            <input type="number" id="maxPriceInput" class="price-input" placeholder="Max" value="<%= maxPrice || '' %>" min="0">
                        </div>
                        <button type="button" class="apply-filter" onclick="applyPriceFilter()">Apply Price Filter</button>
                    </div>
                </div>

                <!-- <div class="sidebar-section">
                    <h3 class="sidebar-title">Alphabetical</h3>
                    <div class="alpha-filter">
                        <input type="radio" id="alpha-all" name="alpha" value="" class="alpha-checkbox" <%= !alphaFilter ? 'checked' : '' %>>
                        <label for="alpha-all" class="alpha-label">All</label>
                        
                        <input type="radio" id="alpha-af" name="alpha" value="a-f" class="alpha-checkbox" <%= alphaFilter === 'a-f' ? 'checked' : '' %>>
                        <label for="alpha-af" class="alpha-label">A-F</label>
                        
                        <input type="radio" id="alpha-gl" name="alpha" value="g-l" class="alpha-checkbox" <%= alphaFilter === 'g-l' ? 'checked' : '' %>>
                        <label for="alpha-gl" class="alpha-label">G-L</label>
                        
                        <input type="radio" id="alpha-mr" name="alpha" value="m-r" class="alpha-checkbox" <%= alphaFilter === 'm-r' ? 'checked' : '' %>>
                        <label for="alpha-mr" class="alpha-label">M-R</label>
                        
                        <input type="radio" id="alpha-sz" name="alpha" value="s-z" class="alpha-checkbox" <%= alphaFilter === 's-z' ? 'checked' : '' %>>
                        <label for="alpha-sz" class="alpha-label">S-Z</label>
                    </div>
                </div> -->

                <div class="sidebar-section">
                    <button type="button" class="reset-filters" onclick="resetAllFilters()">Reset All Filters</button>
                </div>
            </div>

            <!-- Products Main -->
            <div class="shop-products grid-view">
                <div class="shop-controls">
                    <div class="products-found" id="products-found">
                        Showing <%= (currentPage - 1) * 9 + 1 %>-<%= Math.min(currentPage * 9, totalProducts) %> of <%= totalProducts %> products
                    </div>
                    <div class="shop-actions">
                        <div class="view-options">
                            <button class="view-btn active" data-view="grid">☰</button>
                            <!-- <button class="view-btn" data-view="list">≡</button> -->
                        </div>
                        <select class="sort-select" id="sort-select">
                            <option value="relevance" <%= sort === 'relevance' ? 'selected' : '' %>>Relevance</option>
                            <option value="price-low" <%= sort === 'price-low' ? 'selected' : '' %>>Price: Low to High</option>
                            <option value="price-high" <%= sort === 'price-high' ? 'selected' : '' %>>Price: High to Low</option>
                            <option value="newest" <%= sort === 'newest' ? 'selected' : '' %>>Newest First</option>
                            <option value="bestselling" <%= sort === 'bestselling' ? 'selected' : '' %>>Bestselling</option>
                        </select>
                    </div>
                </div>

                <div class="product-grid" id="product-grid">
                    <% if (products.length > 0) { %>
                        <% products.forEach(product => { %>
                            <div class="product-card">
                                <div class="product-image">
                                    <img src="/<%= product.productImage[0] %>" alt="<%= product.productName %>">
                                </div>
                                <div class="product-details">
                                    <h3 class="product-name"><%= product.productName %></h3>
                                    <p class="product-brand">Brand: <%= product.brand %></p>
                                   <span style="display: flex; gap: 10px; align-items: center;">
  <% if (product.regularPrice !== product.salePrice) { %>
    <del><p class="product-price">₹ <%= product.regularPrice %></p></del>
  <% } %>
  <p class="product-price">₹ <%= product.salePrice %></p>
</span>
                                    <p class="product-color">Color: <%= product.color %></p>
                                    <p class="product-description"><%= product.description.slice(0, 100) %>...</p>
                                    <a href="/product/<%= product._id %>" class="view-button">View Product</a>
                                    <a class="wishlist-btn" onclick="addToWishlist('<%= product._id %>')">
        <i class="fa-solid fa-heart <%= (user && user.wishlist && user.wishlist.some(w => String(w.id) === String(product._id))) ? 'wishlist-active' : '' %>"></i>
                                    </a>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <p style="text-align: center; color: var(--light-text); font-size: 18px;">
                            No products found. Try adjusting your filters.
                        </p>
                    <% } %>
                </div>

                <!-- Pagination -->
                <div class="pagination" id="pagination"></div>
            </div>
        </div>
    </div>
</section>

<script>
// Global state to track current filters
let currentFilters = {
    query: '<%= searchQuery || "" %>',
    category: '<%= selectedCategory || "" %>',
    minPrice: '<%= minPrice || "" %>',
    maxPrice: '<%= maxPrice || "" %>',
    alpha: '<%= alphaFilter || "" %>',
    sort: '<%= sort || "relevance" %>',
    page: <%= currentPage || 1 %>
};

function debounce(func, delay) {
    let timeoutId;
    return function (...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
    };
}

function showLoading() {
    const productGrid = document.getElementById('product-grid');
    productGrid.innerHTML = '<div class="loading">Loading products...</div>';
}

function updateActiveCategory() {
    // Remove active class from all category links
    document.querySelectorAll('.category-link').forEach(link => {
        link.classList.remove('active');
    });
    
    // Add active class to current category
    const activeLink = document.querySelector(`[data-category="${currentFilters.category}"]`);
    if (activeLink) {
        activeLink.classList.add('active');
    }
}

function performSearch(resetPage = true) {
    if (resetPage) {
        currentFilters.page = 1;
    }
    
    showLoading();
    updateActiveCategory();
    
    const queryParams = new URLSearchParams();
    
    // Only add non-empty parameters
    Object.keys(currentFilters).forEach(key => {
        if (currentFilters[key] && currentFilters[key] !== '') {
            queryParams.append(key, currentFilters[key]);
        }
    });

    fetch(`/filter?${queryParams.toString()}`, {
        headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        updateProductGrid(data);
        updatePagination(data);
        updateProductsFound(data);
        
        // Update URL without page reload
        const newUrl = `/shop?${queryParams.toString()}`;
        window.history.pushState(currentFilters, '', newUrl);
    })
    .catch(error => {
        console.error('Error fetching products:', error);
        const productGrid = document.getElementById('product-grid');
        productGrid.innerHTML = `
            <p style="text-align: center; color: var(--light-text); font-size: 18px;">
                Error loading products. Please try again.
            </p>
        `;
    });
}

function updateProductGrid(data) {
    const productGrid = document.getElementById('product-grid');
    productGrid.innerHTML = '';
    
   if (data.products && data.products.length > 0) {
    data.products.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';

        // conditional price display
        const priceHTML = product.regularPrice !== product.salePrice
            ? `<span style="display: flex; gap: 10px; align-items: center;">
                 <del><p class="product-price">₹ ${product.regularPrice}</p></del>
                 <p class="product-price">₹ ${product.salePrice}</p>
               </span>`
            : `<span style="display: flex; gap: 10px; align-items: center;">
                 <p class="product-price">₹ ${product.salePrice}</p>
               </span>`;

        productCard.innerHTML = `
            <div class="product-image">
                <img src="/${product.productImage[0]}" alt="${product.productName}">
            </div>
            <div class="product-details">
                <h3 class="product-name">${product.productName}</h3>
                <p class="product-brand">Brand: ${product.brand}</p>
                ${priceHTML}
                <p class="product-color">Color: ${product.color}</p>
                <p class="product-description">${product.description.slice(0, 100)}...</p>
                <a href="/product/${product._id}" class="view-button">View Product</a>
            </div>
        `;

        productGrid.appendChild(productCard);
    });
}
 else {
        productGrid.innerHTML = `
            <p style="text-align: center; color: var(--light-text); font-size: 18px;">
                No products found. Try adjusting your filters.
            </p>
        `;
    }
}

function updatePagination(data) {
    const pagination = document.getElementById('pagination');
    pagination.innerHTML = '';
    
    if (data.totalPages > 1) {
        // Previous button
        if (data.currentPage > 1) {
            const prevLink = document.createElement('a');
            prevLink.textContent = '‹ Previous';
            prevLink.onclick = () => goToPage(data.currentPage - 1);
            pagination.appendChild(prevLink);
        }
        
        // Page numbers
        const startPage = Math.max(1, data.currentPage - 2);
        const endPage = Math.min(data.totalPages, data.currentPage + 2);
        
        if (startPage > 1) {
            const firstLink = document.createElement('a');
            firstLink.textContent = '1';
            firstLink.onclick = () => goToPage(1);
            pagination.appendChild(firstLink);
            
            if (startPage > 2) {
                const dots = document.createElement('span');
                dots.textContent = '...';
                dots.style.padding = '8px 12px';
                pagination.appendChild(dots);
            }
        }
        
        for (let i = startPage; i <= endPage; i++) {
            const pageLink = document.createElement('a');
            pageLink.textContent = i;
            pageLink.className = data.currentPage === i ? 'active' : '';
            pageLink.onclick = () => goToPage(i);
            pagination.appendChild(pageLink);
        }
        
        if (endPage < data.totalPages) {
            if (endPage < data.totalPages - 1) {
                const dots = document.createElement('span');
                dots.textContent = '...';
                dots.style.padding = '8px 12px';
                pagination.appendChild(dots);
            }
            
            const lastLink = document.createElement('a');
            lastLink.textContent = data.totalPages;
            lastLink.onclick = () => goToPage(data.totalPages);
            pagination.appendChild(lastLink);
        }
        
        // Next button
        if (data.currentPage < data.totalPages) {
            const nextLink = document.createElement('a');
            nextLink.textContent = 'Next ›';
            nextLink.onclick = () => goToPage(data.currentPage + 1);
            pagination.appendChild(nextLink);
        }
    }
}

//wishllist
async function addToWishlist(productId) {
    try {
      const response = await fetch(`/addToWishlist/${productId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      const data = await response.json();
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Added to Wishlist!',
          text: 'Product has been added to your wishlist.',
          confirmButtonColor: '#d4af37',

         
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Failed to Add!',
          text: data.message || 'Failed to add product to wishlist.',
         confirmButtonColor: '#d4af37',
        });
      }
    } catch (error) {
      console.error('Error adding to wishlist:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: 'An error occurred while adding to wishlist.',
        confirmButtonColor: '#d4af37',


      });
    }
  }



function updateProductsFound(data) {
    const productsFound = document.getElementById('products-found');
    const start = (data.currentPage - 1) * 9 + 1;
    const end = Math.min(data.currentPage * 9, data.totalProducts);
    productsFound.textContent = `Showing ${start}-${end} of ${data.totalProducts} products`;
}

function goToPage(page) {
    currentFilters.page = page;
    performSearch(false);
}

function filterByCategory(categoryId) {
    currentFilters.category = categoryId;
    performSearch();
}

function applyPriceFilter() {
    const minPrice = document.getElementById('minPriceInput').value;
    const maxPrice = document.getElementById('maxPriceInput').value;
    
    currentFilters.minPrice = minPrice;
    currentFilters.maxPrice = maxPrice;
    performSearch();
}

function resetAllFilters() {
    currentFilters = {
        query: '',
        category: '',
        minPrice: '',
        maxPrice: '',
        alpha: '',
        sort: 'relevance',
        page: 1
    };
    
    // Reset form inputs
    document.getElementById('search-input').value = '';
    document.getElementById('minPriceInput').value = '';
    document.getElementById('maxPriceInput').value = '';
    document.getElementById('sort-select').value = 'relevance';
    
    // Reset alpha filter
    document.querySelectorAll('.alpha-checkbox').forEach(checkbox => {
        checkbox.checked = checkbox.value === '';
    });
    
    performSearch();
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Search input with debounce
    const searchInput = document.getElementById('search-input');
    const debouncedSearch = debounce(() => {
        currentFilters.query = searchInput.value.trim();
        performSearch();
    }, 300);
    searchInput.addEventListener('input', debouncedSearch);

    // Search form submission
    document.getElementById('search-form').addEventListener('submit', (e) => {
        e.preventDefault();
        currentFilters.query = searchInput.value.trim();
        performSearch();
    });

    // Sort select change
    document.getElementById('sort-select').addEventListener('change', (e) => {
        currentFilters.sort = e.target.value;
        performSearch();
    });

    // Alpha filter change
    document.querySelectorAll('.alpha-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', () => {
            if (checkbox.checked) {
                currentFilters.alpha = checkbox.value;
                performSearch();
            }
        });
    });

    // Price input changes
    document.getElementById('minPriceInput').addEventListener('change', () => {
        currentFilters.minPrice = document.getElementById('minPriceInput').value;
        performSearch();
    });

    document.getElementById('maxPriceInput').addEventListener('change', () => {
        currentFilters.maxPrice = document.getElementById('maxPriceInput').value;
        performSearch();
    });

    // Initialize pagination for current page
    const initialData = {
        currentPage: <%= currentPage || 1 %>,
        totalPages: <%= totalPages || 1 %>,
        totalProducts: <%= totalProducts || 0 %>
    };
    updatePagination(initialData);
    updateActiveCategory();
});

// Handle browser back/forward buttons
window.addEventListener('popstate', function(event) {
    if (event.state) {
        currentFilters = event.state;
        
        // Update form inputs to match state
        document.getElementById('search-input').value = currentFilters.query || '';
        document.getElementById('minPriceInput').value = currentFilters.minPrice || '';
        document.getElementById('maxPriceInput').value = currentFilters.maxPrice || '';
        document.getElementById('sort-select').value = currentFilters.sort || 'relevance';
        
        // Update alpha filter
        document.querySelectorAll('.alpha-checkbox').forEach(checkbox => {
            checkbox.checked = checkbox.value === (currentFilters.alpha || '');
        });
        
        performSearch(false);
    }
});
</script>

<%- include("../../views/partials/user/footer") %>