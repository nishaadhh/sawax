

    <%- include("../../views/partials/user/header") %>

<style>
    /* General form styling */
    .container.mt-4 {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    h3.mt-3 {
        font-weight: 600;
        color: #046963;
        text-align: center;
        margin-bottom: 40px;
        font-size: 1.8rem;
    }

    /* Form styling */
    #addressForm {
        background-color: #ffffff;
        padding: 30px;
        border-radius: 10px;
        border: 1px solid #e0e0e0;
    }

    /* Form group and input styling */
    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        font-weight: 500;
        color: #333;
        margin-bottom: 8px;
        display: block;
        font-size: 0.95rem;
    }

    .form-control {
        border: 2px solid #d1d5db;
        border-radius: 8px;
        padding: 10px;
        font-size: 0.95rem;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
        background-color: #fff;
    }

    .form-control:focus {
        border-color: #046963;
        box-shadow: 0 0 8px rgba(4, 105, 99, 0.2);
        outline: none;
    }

    /* Specific styling for country and state dropdowns */
    #country,
    #state {
        height: calc(2.25rem + 2px) !important; /* Matches Bootstrap input field height */
        padding-top: 5px !important; /* Adjust vertical alignment */
        appearance: none;
        background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 1rem;
    }

    /* Button styling */
    .btn-primary {
        background-color: #d4af37;
        border-color: #d4af37;
        padding: 12px 30px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        border-radius: 8px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        display: block;
        margin: 20px auto 0;
    }

    .btn-primary:hover {
        background-color: #685619;
        border-color: #d4af37;
        transform: translateY(-2px);
    }

    .btn-primary:active {
        transform: translateY(0);
    }

    /* Error message styling */
    .text-danger {
        font-size: 0.85rem;
        margin-top: 5px;
        color: #dc3545;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .form-group {
            margin-bottom: 1.2rem;
        }

        .btn-primary {
            width: 100%;
            padding: 12px;
        }

        #addressForm {
            padding: 20px;
        }
    }

    /* Breadcrumb and banner styling */
    .banner-area {
        background: #d4af37;
        padding: 60px 0;
        color: #fff;
    }

    .breadcrumb-banner h1 {
        font-size: 2.2rem;
        font-weight: 700;
        margin-bottom: 10px;
    }

    .breadcrumb-banner nav a {
        color: #e0f7f6;
        font-size: 0.95rem;
        transition: color 0.3s ease;
    }

    .breadcrumb-banner nav a:hover {
        color: #ffffff;
        text-decoration: underline;
    }

    .lnr-arrow-right {
        color: #e0f7f6;
        margin: 0 5px;
    }
</style>

<section class="banner-area organic-breadcrumb">
    <div class="container">
        <div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
            <div class="col-first">
                <h1>Add Address</h1>
                <nav class="d-flex align-items-center">
                    <a href="/">Home  /<span class="lnr lnr-arrow-right"></span></a>
                    <a href="/userProfile">Profile  /<span class="lnr lnr-arrow-right"></span></a>
                    <a href="/address">Address  /<span class="lnr lnr-arrow-right"></span></a>
                    <a href="/addAddress">Add Address</a>
                </nav>
            </div>
        </div>
    </div>
</section>

<div class="container mt-4">
   <h3 class="mt-3" style="color: #000000; margin-bottom:70px">Create User Address</h3>
   <form id="addressForm" method="POST" action="/addAddress" class="border-0 p-3">
       <div class="row mb-50">
           <div class="form-group col-md-4">
               <label for="addressType">Address Type:</label>
               <input type="text" class="form-control border-3" id="addressType" name="addressType" required>
           </div>
           <div class="form-group col-md-4">
               <label for="name">Name:</label>
               <input type="text" class="form-control border-3" id="name" name="name" required>
           </div>
           <div class="form-group col-md-4">
            <label for="country">Country:</label>
            <select class="form-control border-3" id="country" name="country" required>
                <option value="India">India</option>
            </select>
        </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="city">City:</label>
               <input type="text" class="form-control border-3" id="city" name="city" required>
           </div>
           <div class="form-group col-md-4">
               <label for="landMark">Landmark:</label>
               <input type="text" class="form-control border-3" id="landMark" name="landMark" required>
           </div>
           <div class="form-group col-md-4">
            <label for="state">State:</label>
            <select class="form-control border-3" id="state" name="state" required>
                
                <option value="Kerala">Kerala</option>
                
            </select>
        </div>
        
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="streetAddress">Street Address:</label>
               <input type="text" class="form-control border-3" id="streetAddress" name="streetAddress" required>
           </div>
           <div class="form-group col-md-4">
               <label for="pincode">Pincode:</label>
               <input type="number" class="form-control border-3" id="pincode" name="pincode" required>
           </div>
           <div class="form-group col-md-4">
               <label for="phone">Phone:</label>
               <input type="text" class="form-control border-3" id="phone" name="phone" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="email">Email:</label>
               <input type="email" class="form-control border-3" id="email" name="email" required>
           </div>
           <div class="form-group col-md-4">
               <label for="altPhone">Alternate Phone:</label>
               <input type="text" class="form-control border-3" id="altPhone" name="altPhone" required>
           </div>
       </div>
       <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
   </form>
</div>
   
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
   document.getElementById('addressForm').addEventListener('submit', function(event) {
       if (!validateForm()) {
           event.preventDefault();
       }
   });

   function validateForm() {
       let isValid = true;
       const requiredFields = ["addressType", "name", "country", "city", "landMark", "state", "streetAddress", "pincode", "phone", "email", "altPhone"];
       requiredFields.forEach(function(field) {
           const input = document.getElementById(field);
           const inputValue = input.value.trim();
           const errorElement = document.getElementById(field + '-error');

           if (inputValue === "") {
               if (!errorElement) {
                   const errorMessage = "This field is required.";
                   const errorDiv = document.createElement('div');
                   errorDiv.className = "text-danger";
                   errorDiv.textContent = errorMessage;
                   errorDiv.id = field + '-error';
                   input.parentNode.appendChild(errorDiv);
               }
               isValid = false;
           } else {
               if (errorElement) {
                   errorElement.remove();
               }
           }
       });

       const namePattern = /^[A-Za-z\s]+$/;
       const pincodePattern = /^\d{6}$/;
       const phonePattern = /^\d{10}$/;
       const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

       const name = document.getElementById('name').value;
       const city = document.getElementById('city').value;
       const landMark = document.getElementById('landMark').value;
       const state = document.getElementById('state').value;
       const pincode = document.getElementById('pincode').value;
       const phone = document.getElementById('phone').value;
       const altPhone = document.getElementById('altPhone').value;
       const email = document.getElementById('email').value;

       if (!namePattern.test(name)) {
           Swal.fire({
               title: 'Error',
               text: 'Name should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(city)) {
           Swal.fire({
               title: 'Error',
               text: 'City should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(landMark)) {
           Swal.fire({
               title: 'Error',
               text: 'Landmark should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(state)) {
           Swal.fire({
               title: 'Error',
               text: 'State should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!pincodePattern.test(pincode)) {
           Swal.fire({
               title: 'Error',
               text: 'Pincode should be a 6-digit number.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!phonePattern.test(phone)) {
           Swal.fire({
               title: 'Error',
               text: 'Phone number should be a 10-digit number.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!phonePattern.test(altPhone)) {
           Swal.fire({
               title: 'Error',
               text: 'Alternate phone number should be a 10-digit number.',
               icon: 'error'
           });
           isValid = false;
       }
       if (phone === altPhone) {
           Swal.fire({
               title: 'Error',
               text: 'Phone number and alternate phone number should be different.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!emailPattern.test(email)) {
           Swal.fire({
               title: 'Error',
               text: 'Please enter a valid email address.',
               icon: 'error'
           });
           isValid = false;
       }
       return isValid;
   }
</script>
 <!-- <%- include("../../views/partials/user/footer") %> -->