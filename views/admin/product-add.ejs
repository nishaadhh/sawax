<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
    <style>
        /* General Styling */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --danger-color: #e74c3c;
            --info-color: #3498db;
            --light-gray: #ecf0f1;
        }

        .error-message {
            color: red;
            font-size: 0.875rem;
        }

        /* Main Section Styling */
        .content-main {
            padding: 3rem 2rem;
        }

        .content-header {
            margin-bottom: 2rem;
        }

        .content-title {
            font-size: 2rem;
            font-weight: bold;
        }

        /* Form Styling */
        .form-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            font-size: 1rem;
            border-radius: 8px;
            border: 1px solid #ddd;
        }

        .form-group input[type="number"] {
            -moz-appearance: textfield;
        }

        .form-group select {
            cursor: pointer;
        }

        .form-actions {
            display: flex;
            justify-content: flex-start;
            margin-top: 1.5rem;
        }

        .form-actions button {
            background-image:linear-gradient(#a855f7, #3b0764);
            color: white;
            padding: 0.75rem 1.5rem;
            font-size: 1.125rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .form-actions button:hover {
            background-image: linear-gradient(#a855f7, #27a800);
        }

        /* Image Preview Styling */
        .image-preview {
            max-width: 100%;
            max-height: 200px;
            border: 1px solid #ddd;
            margin-top: 10px;
            border-radius: 8px;
        }

        .image-upload-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .thumbnail {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .thumbnail img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 50%;
            margin-right: 10px;
        }

        /* Spinner Styling */
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
            vertical-align: middle;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>

<section class="content-main">
    <div class="content-header">
        <h2 class="content-title">Add New Product</h2>
    </div>
    <form id="productForm" method="POST" action="/admin/addProducts" enctype="multipart/form-data">
        <div class="form-container">
            <div class="form-group">
                <label for="product_name">Product Name</label>
                <input type="text" name="productName" id="product_name" placeholder="Enter product name">
                <div id="productName-error" class="error-message"></div>
            </div>
            
            <div class="form-group">
                <label for="descriptionid">Short Description</label>
                <textarea id="descriptionid" name="description" rows="4" placeholder="Enter product short description"></textarea>
                <div id="description-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="brand">Brand</label>
                <input type="text" name="brand" id="brand" placeholder="Enter brand">
                <div id="brand-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="regularPrice">Regular Price</label>
                <input type="number" name="regularPrice" id="regularPrice" step="0.01" placeholder="Enter regular price">
                <div id="regularPrice-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="quantity">Quantity</label>
                <input type="number" name="quantity" id="quantity" placeholder="Enter quantity">
                <div id="quantity-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="color">Color</label>
                <input type="text" name="color" id="color" placeholder="Enter color">
                <div id="color-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="category">Category</label>
                <select name="category" id="category">
                    <% for (let i = 0; i < cat.length; i++) { %>
                        <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                    <% } %>
                </select>
                <div id="category-error" class="error-message"></div>
            </div>
        </div>

        <div class="image-upload-container">
            <h4>Product Images</h4>
            <% for (let i = 1; i <= 4; i++) { %>
                <div class="form-group">
                    <label for="image<%= i %>">Image <%= i %></label>
                    <input type="file" name="image<%= i %>" id="image<%= i %>" class="form-control" accept="image/*" onchange="previewImage(event, <%= i %>)">
                    <img id="preview<%= i %>" src="#" alt="Image preview" class="image-preview" style="display: none;">
                    <button type="button" class="btn btn-primary mt-2" onclick="saveImage(<%= i %>)">Save Image <%= i %></button>
                    <div id="image<%= i %>-error" class="error-message"></div>
                </div>
            <% } %>
        </div>

        <div class="form-actions">
            <button type="submit">Publish Product</button>
        </div>
    </form>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>

<script>
  let croppers = {};
  let croppedImages = {}; // Store cropped images
  let isSubmitting = false; // Flag to prevent multiple submissions

  function previewImage(event, index) {
    const input = event.target;
    if (input.files && input.files[0]) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const preview = document.getElementById(`preview${index}`);
        preview.src = e.target.result;
        preview.style.display = 'block';

        if (croppers[index]) {
          croppers[index].destroy();
        }

        croppers[index] = new Cropper(preview, {
          aspectRatio: 1,
          viewMode: 1,
          ready: function () {
            this.cropper.crop();
          },
        });
      };
      reader.readAsDataURL(input.files[0]);
    }
  }

  function saveImage(index) {
    if (croppers[index]) {
      croppers[index].getCroppedCanvas().toBlob((blob) => {
        croppedImages[index] = blob; // Store the cropped image blob
        Swal.fire({
          title: 'Success!',
          text: `Image ${index} cropped and ready to upload`,
          icon: 'success',
          confirmButtonText: 'OK',
        });
      }, 'image/webp');
    } else {
      Swal.fire({
        title: 'Error!',
        text: `No image selected for cropping in Image ${index}`,
        icon: 'error',
        confirmButtonText: 'OK',
      });
    }
  }

  document.getElementById('productForm').addEventListener('submit', function (e) {
    e.preventDefault();

    // Prevent multiple submissions
    if (isSubmitting) {
      return;
    }

    // Form validation
    let isValid = true;
    const requiredFields = ['productName', 'description', 'brand', 'regularPrice', 'quantity', 'color', 'category'];
    requiredFields.forEach((field) => {
      const input = document.getElementsByName(field)[0];
      if (!input.value) {
        isValid = false;
        document.getElementById(`${field}-error`).textContent = 'This field is required.';
      } else {
        document.getElementById(`${field}-error`).textContent = '';
      }
    });

    // Check if all images are cropped
    for (let i = 1; i <= 4; i++) {
      if (!croppedImages[i]) {
        isValid = false;
        document.getElementById(`image${i}-error`).textContent = 'Please crop and save this image.';
      } else {
        document.getElementById(`image${i}-error`).textContent = '';
      }
    }

    if (isValid) {
      // Set submitting flag and update button state
      isSubmitting = true;
      const submitButton = document.querySelector('.form-actions button');
      const originalButtonText = submitButton.textContent;
      submitButton.disabled = true;
      submitButton.innerHTML = `
        <span class="spinner"></span> Adding Product...
      `;

      const formData = new FormData();
      // Append text fields
      requiredFields.forEach((field) => {
        const input = document.getElementsByName(field)[0];
        formData.append(field, input.value);
      });

      // Append cropped images
      for (let i = 1; i <= 4; i++) {
        if (croppedImages[i]) {
          formData.append(`image${i}`, croppedImages[i], `product-image${i}.webp`);
        }
      }

      // Log FormData contents for debugging
      for (let [key, value] of formData.entries()) {
        console.log(`${key}:`, value);
      }

      fetch('/admin/addProducts', {
        method: 'POST',
        body: formData,
      })
        .then((response) => {
          // Check if the response is OK (status 200-299)
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}, StatusText: ${response.statusText}`);
          }
          return response.json();
        })
        .then((data) => {
          isSubmitting = false;
          submitButton.disabled = false;
          submitButton.innerHTML = originalButtonText;

          if (data.success) {
            Swal.fire({
              title: 'Success!',
              text: 'Product added successfully',
              icon: 'success',
              confirmButtonText: 'OK',
            }).then((result) => {
              if (result.isConfirmed) {
                window.location.href = '/admin/addProducts';
              }
            });
          } else {
            Swal.fire({
              title: 'Error!',
              text: data.message || 'An error occurred while adding the product',
              icon: 'error',
              confirmButtonText: 'OK',
            });
          }
        })
        .catch((error) => {
          isSubmitting = false;
          submitButton.disabled = false;
          submitButton.innerHTML = originalButtonText;

          console.error('Fetch Error:', error);
          Swal.fire({
            title: 'Error!',
            text: `Failed to add product: ${error.message}`,
            icon: 'error',
            confirmButtonText: 'OK',
          });
        });
    }
  });
</script>

<%- include("../../views/partials/admin/footer") %>