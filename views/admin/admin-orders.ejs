<%- include('../partials/admin/header') %>

<style>
   :root {
      --primary-color: #1e90ff;
      --secondary-color: #2d3436;
      --success-color: #00b894;
      --danger-color: #d63031;
      --info-color: #0984e3;
      --light-gray: #dfe6e9;
      --background-color: #f5f6fa;
      --white: #ffffff;
      --shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
      --transition: all 0.3s ease;
    }
    .order-table th, .order-table td {
        vertical-align: middle;
    }
    .status-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-weight: 500;
        font-size: 0.85rem;
    }
    .order-actions .btn {
        margin: 2px;
        font-size: 0.8rem;
        padding: 4px 12px;
    }
    .btn-sm i {
    font-size: 13px;
    line-height: 1.8;
    vertical-align: bottom;
}
    .btn.loading {
        position: relative;
        pointer-events: none;
        opacity: 0.7;
    }
    .btn.loading::after {
        content: '';
        position: absolute;
        width: 12px;
        height: 12px;
        margin: auto;
        border: 2px solid transparent;
        border-top-color: #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    @keyframes spin {
        0% { transform: translate(-50%, -50%) rotate(0deg); }
        100% { transform: translate(-50%, -50%) rotate(360deg); }
    }
    
    /* Pagination Styles */
    .pagination-container {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-top: 20px;
        padding: 15px 0;
        border-top: 1px solid #dee2e6;
    }
    
    .pagination-info {
        color: #6c757d;
        font-size: 0.9rem;
    }
    
    .pagination {
        margin: 0;
    }
    
    .pagination .page-link {
        color: var(--primary-color);
        border: 1px solid #dee2e6;
        padding: 8px 12px;
        margin: 0 2px;
        border-radius: 6px;
        text-decoration: none;
        transition: all 0.2s ease;
    }
    
    .pagination .page-link:hover {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }
    
    .pagination .page-item.active .page-link {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        color: white;
    }
    
    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background-color: #fff;
        border-color: #dee2e6;
    }
    
    .pagination .page-link:focus {
        box-shadow: 0 0 0 0.2rem rgba(30, 144, 255, 0.25);
    }
    
    .search {
    font-size: 14px;
    font-weight: 500;
    padding: 10px 40px;
    color: #ffffff;
    border: none;
    background: linear-gradient(#a855f7, #3b0764);
    border-radius: 4px;
}
.search:hover{
    background: #a855f7;
    color: #ffffff;
}


    @media (max-width: 768px) {
        .pagination-container {
            flex-direction: column;
            gap: 15px;
        }
        
        .pagination .page-link {
            padding: 6px 10px;
            font-size: 0.85rem;
        }
    }
</style>

<div class="container-fluid px-4">

    <h1 class="mt-4">Order Management </h1>
    <div class="card mb-4">
        <div class="card-body" style="background: linear-gradient(90deg, #a855f7, #3b0764);">
            <form action="/admin/orders" method="GET" class="row g-3 align-items-end">
                <div class="col-md-4">
                    <label for="product" class="form-label">Product Name</label>
                    <input type="text" class="form-control" id="product" name="product" 
                           value="<%= searchParams.product || '' %>" 
                           placeholder="Search by product name">
                </div>
                <div class="col-md-3">
                    <label for="status" class="form-label">Order Status</label>
                    <select class="form-select" id="status" name="status">
                        <option value="">All Statuses</option>
                        <option value="pending" <%= searchParams.status === 'pending' ? 'selected' : '' %>>Pending</option>
                        <option value="confirmed" <%= searchParams.status === 'confirmed' ? 'selected' : '' %>>Confirmed</option>
                        <option value="shipped" <%= searchParams.status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                        <option value="delivered" <%= searchParams.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="date" class="form-label">Date</label>
                    <input type="date" class="form-control" id="date" name="date" 
                           value="<%= searchParams.date || '' %>">
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn search w-100">Search</button>
                </div>
            </form>
        </div>
    </div>
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            All Orders
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped order-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Product</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <tr>
                                <td>#<%= order.orderId %></td>
                                <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                                <td>
                                    <div>
                                        <strong><%= order.address.name %></strong>
                                        <div class="text-muted small"><%= order.address.email %></div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="d-flex align-items-center">
                                            <img src="/<%= order.orderedItems[0].productImages[0] %>" 
                                                 alt="<%= order.orderedItems[0].productName %>" 
                                                 style="width: 50px; height: 50px; object-fit: cover;"
                                                 class="me-2">
                                        </div>
                                        <div>
                                            <div><%= order.orderedItems[0].productName.substring(0, 30) %>...</div>
                                            <small class="text-muted">Qty: <%= order.orderedItems[0].quantity %></small>
                                        </div>
                                    </div>
                                </td>
                                <td>â‚¹<%= order.finalAmount.toFixed(2) %></td>
                                <td>
                                    <div>
                                        <span class="status-badge <%= 
                                            order.status === 'delivered' ? 'bg-success' :
                                            order.status === 'cancelled' ? 'bg-danger' :
                                            order.status === 'shipped' ? 'bg-info' :
                                            order.status === 'return_requested' ? 'bg-warning' :
                                            order.status === 'returning' ? 'bg-info' :
                                            order.status === 'returned' ? 'bg-secondary' :
                                            'bg-warning'
                                        %>">
                                            <%= order.status.toUpperCase().replace('_', ' ') %>
                                        </span>
                                    </div>
                                    <% if (order.paymentMethod) { %>
                                        <small class="text-muted d-block mt-1">
                                            <%= order.paymentMethod.toUpperCase() %> | <%= order.paymentStatus.toUpperCase() %>
                                        </small>
                                    <% } %>
                                </td>
                                <td class="order-actions">
                                    <a href="/admin/orders/<%= order._id %>" 
                                       class="btn btn-primary btn-sm">
                                       View
                                    </a>
                                    
                                    <% if (order.status === 'return_requested' && order.requestStatus === 'pending') { %>
                                        <div class="btn-group mt-1">
                                            <button onclick="handleReturn('approve', '<%= order._id %>')" 
                                                    class="btn btn-success btn-sm" 
                                                    id="approve-<%= order._id %>">
                                                <i class="fas fa-check"></i> Approve
                                            </button>
                                            <button onclick="handleReturn('reject', '<%= order._id %>')" 
                                                    class="btn btn-danger btn-sm"
                                                    id="reject-<%= order._id %>">
                                                <i class="fas fa-times"></i> Reject
                                            </button>
                                        </div>
                                    <% } else if (order.status === 'returning' && order.requestStatus === 'approved') { %>
                                        <button onclick="updateReturnStatus('<%= order._id %>')" 
                                                class="btn btn-info btn-sm mt-1"
                                                id="update-return-<%= order._id %>">
                                            <i class="fas fa-edit"></i> Update Return
                                        </button>
                                    <% } else if (!['cancelled', 'delivered', 'returned', 'return_requested', 'returning'].includes(order.status)) { %>
                                        <div class="mt-1">
                                            <button onclick="updateStatus('<%= order._id %>')" 
                                                    class="btn btn-info btn-sm"
                                                    id="update-<%= order._id %>">
                                                <i class="fas fa-edit"></i> Update
                                            </button>
                                            <button onclick="cancelOrder('<%= order._id %>')" 
                                                    class="btn btn-danger btn-sm"
                                                    id="cancel-<%= order._id %>">
                                                <i class="fas fa-ban"></i> Cancel
                                            </button>
                                        </div>
                                    <% } %>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination -->
            <% if (totalPages > 1) { %>
                <div class="pagination-container">
                    <div class="pagination-info">
                        <span>Page <%= currentPage %> of <%= totalPages %></span>
                    </div>
                    
                    <nav aria-label="Orders pagination">
                        <ul class="pagination">
                            <!-- Previous Button -->
                            <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                <a class="page-link" href="<%= currentPage === 1 ? '#' : buildPaginationUrl(currentPage - 1, searchParams) %>" 
                                   aria-label="Previous">
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            </li>
                            
                            <!-- Page Numbers -->
                            <% 
                                let startPage = Math.max(1, currentPage - 2);
                                let endPage = Math.min(totalPages, currentPage + 2);
                                
                                // Adjust range if we're at the beginning or end
                                if (currentPage <= 3) {
                                    endPage = Math.min(totalPages, 5);
                                }
                                if (currentPage >= totalPages - 2) {
                                    startPage = Math.max(1, totalPages - 4);
                                }
                            %>
                            
                            <!-- First page if not in range -->
                            <% if (startPage > 1) { %>
                                <li class="page-item">
                                    <a class="page-link" href="<%= buildPaginationUrl(1, searchParams) %>">1</a>
                                </li>
                                <% if (startPage > 2) { %>
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                <% } %>
                            <% } %>
                            
                            <!-- Page number links -->
                            <% for (let i = startPage; i <= endPage; i++) { %>
                                <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                    <a class="page-link" href="<%= buildPaginationUrl(i, searchParams) %>"><%= i %></a>
                                </li>
                            <% } %>
                            
                            <!-- Last page if not in range -->
                            <% if (endPage < totalPages) { %>
                                <% if (endPage < totalPages - 1) { %>
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                <% } %>
                                <li class="page-item">
                                    <a class="page-link" href="<%= buildPaginationUrl(totalPages, searchParams) %>"><%= totalPages %></a>
                                </li>
                            <% } %>
                            
                            <!-- Next Button -->
                            <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                <a class="page-link" href="<%= currentPage === totalPages ? '#' : buildPaginationUrl(currentPage + 1, searchParams) %>" 
                                   aria-label="Next">
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Helper function for building pagination URLs -->
<%
function buildPaginationUrl(page, searchParams) {
    const params = new URLSearchParams();
    params.set('page', page);
    
    // Preserve existing search parameters
    if (searchParams.date) params.set('date', searchParams.date);
    if (searchParams.product) params.set('product', searchParams.product);
    if (searchParams.status) params.set('status', searchParams.status);
    
    return '/admin/orders?' + params.toString();
}
%>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Rejection Category</label>
                    <select class="form-select" id="rejectionCategory" required>
                        <option value="">Select a category</option>
                        <option value="Invalid reason">Invalid reason</option>
                        <option value="Outside return window">Outside return window</option>
                        <option value="Product condition">Product condition</option>
                        <option value="Policy violation">Policy violation</option>
                        <option value="Damaged packaging">Damaged packaging</option>
                        <option value="Missing accessories">Missing accessories</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Detailed Explanation</label>
                    <textarea class="form-control" id="rejectionReason" rows="3" 
                              placeholder="Please provide a detailed explanation for rejecting the return request..." required></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitRejection()" id="submitRejectionBtn">
                    Submit Rejection
                </button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let currentOrderId = null;

async function updateStatus(orderId) {
    const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
            'pending': 'Pending',
            'confirmed': 'Confirmed',
            'shipped': 'Shipped',
            'delivered': 'Delivered'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        const btn = document.getElementById(`update-${orderId}`);
        btn.classList.add('loading');
        btn.disabled = true;

        try {
            const response = await fetch('/admin/orders/update-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        } finally {
            btn.classList.remove('loading');
            btn.disabled = false;
        }
    }
}

async function cancelOrder(orderId) {
    const { value: reason } = await Swal.fire({
        title: 'Cancel Order',
        input: 'textarea',
        inputLabel: 'Cancellation Reason',
        inputPlaceholder: 'Enter reason for cancelling this order...',
        showCancelButton: true,
        confirmButtonText: 'Cancel Order',
        confirmButtonColor: '#d33',
        inputValidator: (value) => {
            if (!value) {
                return 'You need to provide a reason for cancellation!';
            }
        }
    });

    if (reason) {
        const btn = document.getElementById(`cancel-${orderId}`);
        btn.classList.add('loading');
        btn.disabled = true;

        try {
            const response = await fetch('/admin/orders/cancel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, reason }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: `Order cancelled successfully${data.refundAmount > 0 ? `. Refund of â‚¹${data.refundAmount} processed.` : '.'}`,
                    timer: 2000
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to cancel order'
            });
        } finally {
            btn.classList.remove('loading');
            btn.disabled = false;
        }
    }
}

async function handleReturn(action, orderId) {
    currentOrderId = orderId;
    
    if (action === 'reject') {
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
        return;
    }

    if (action === 'approve') {
        const result = await Swal.fire({
            title: 'Approve Return Request',
            text: "This will approve the return request and process the refund. Are you sure?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, approve it!'
        });

        if (result.isConfirmed) {
            const btn = document.getElementById(`approve-${orderId}`);
            btn.classList.add('loading');
            btn.disabled = true;

            try {
                const response = await fetch('/admin/orders/handle-return', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: orderId,
                        action: action
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Return Approved!',
                        text: `Return request approved successfully. Refund of â‚¹${data.refundAmount} has been processed.`,
                        timer: 2000
                    });
                    location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to approve return request'
                });
            } finally {
                btn.classList.remove('loading');
                btn.disabled = false;
            }
        }
    }
}

async function submitRejection() {
    const category = document.getElementById('rejectionCategory').value;
    const reason = document.getElementById('rejectionReason').value;
    
    if (!category || !reason) {
        Swal.fire({
            icon: 'warning',
            title: 'Missing Information',
            text: 'Please select a category and provide a detailed explanation'
        });
        return;
    }

    const btn = document.getElementById('submitRejectionBtn');
    btn.classList.add('loading');
    btn.disabled = true;

    try {
        const response = await fetch('/admin/orders/handle-return', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: currentOrderId,
                action: 'reject',
                category: category,
                message: reason
            })
        });

        const data = await response.json();
        
        if (data.success) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
            modal.hide();
            await Swal.fire({
                icon: 'success',
                title: 'Return Rejected',
                text: 'Return request has been rejected successfully.',
                timer: 1500
            });
            location.reload();
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to reject return request'
        });
    } finally {
        btn.classList.remove('loading');
        btn.disabled = false;
    }
}

async function updateReturnStatus(orderId) {
    const { value: status } = await Swal.fire({
        title: 'Update Return Status',
        input: 'select',
        inputOptions: {
            'returning': 'Returning (In Transit)',
            'returned': 'Returned (Completed)'
        },
        inputPlaceholder: 'Select return status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        const btn = document.getElementById(`update-return-${orderId}`);
        btn.classList.add('loading');
        btn.disabled = true;

        try {
            const response = await fetch('/admin/orders/update-return-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Return status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update return status'
            });
        } finally {
            btn.classList.remove('loading');
            btn.disabled = false;
        }
    }
}
</script>

<%- include('../partials/admin/footer') %>